(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{115:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(5),__webpack_require__(9),__webpack_require__(11),__webpack_require__(10),__webpack_require__(14),__webpack_require__(35),__webpack_require__(21),__webpack_require__(42),__webpack_require__(33),__webpack_require__(36),__webpack_require__(4),__webpack_require__(37),__webpack_require__(54),__webpack_require__(15),__webpack_require__(12),__webpack_require__(16);var quill__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__(13),quill__WEBPACK_IMPORTED_MODULE_16___default=__webpack_require__.n(quill__WEBPACK_IMPORTED_MODULE_16__),_utils__WEBPACK_IMPORTED_MODULE_17__=__webpack_require__(6);function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _get(target,property,receiver){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function _get(target,property,receiver){var base=function _superPropBase(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(receiver):desc.value}})(target,property,receiver||target)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}var Image=quill__WEBPACK_IMPORTED_MODULE_16___default.a.import("formats/image"),BlockEmbed=quill__WEBPACK_IMPORTED_MODULE_16___default.a.import("blots/block/embed"),Icon=quill__WEBPACK_IMPORTED_MODULE_16___default.a.import("ui/icons"),log=__webpack_require__(30)("bobapost:styles:block-image"),BlockImage=function(_BlockEmbed){!function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(BlockImage,_BlockEmbed);var _super=_createSuper(BlockImage);function BlockImage(){return _classCallCheck(this,BlockImage),_super.apply(this,arguments)}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}(BlockImage,null,[{key:"create",value:function create(value){var node=_get(_getPrototypeOf(BlockImage),"create",this).call(this),img=document.createElement("IMG");BlockImage.onLoadCallback&&(img.onload=function(){BlockImage.onLoadCallback(),node.classList.remove("loading")});var src=value.src||value;return log("Image value:"),log(value),img.setAttribute("src",this.sanitize(src)),img.setAttribute("width","".concat(value.width,"px")),img.setAttribute("height","".concat(value.height,"px")),node.setAttribute("contenteditable",!1),node.classList.add("ql-block-image","ql-embed","loading"),img.classList.toggle("spoilers",!!value.spoilers),Object(_utils__WEBPACK_IMPORTED_MODULE_17__.addEmbedOverlay)(node,{onClose:function onClose(){var _BlockImage$onRemoveR;null===(_BlockImage$onRemoveR=BlockImage.onRemoveRequest)||void 0===_BlockImage$onRemoveR||_BlockImage$onRemoveR.call(BlockImage,node)},onMarkSpoilers:function onMarkSpoilers(node,spoilers){spoilers?(node.setAttribute("spoilers","true"),img.classList.add("spoilers")):(node.removeAttribute("spoilers"),img.classList.remove("spoilers"))}},{isSpoilers:!!value.spoilers}),node.appendChild(img),value.spoilers&&node.addEventListener("click",(function(){node.classList.toggle("show-spoilers")})),node}},{key:"sanitize",value:function sanitize(src){return Image.sanitize(src)}},{key:"setOnLoadCallback",value:function setOnLoadCallback(callback){BlockImage.onLoadCallback=callback}},{key:"value",value:function value(domNode){var img=domNode.querySelector("img");if(!img)return null;var spoilers=domNode.getAttribute("spoilers");return{src:img.getAttribute("src"),spoilers:!!spoilers,width:img.naturalWidth,height:img.naturalHeight}}}]),BlockImage}(BlockEmbed);BlockImage.blotName="block-image",BlockImage.tagName="DIV",BlockImage.className="block-image-class",Icon["block-image"]=quill__WEBPACK_IMPORTED_MODULE_16___default.a.import("ui/icons").image,__webpack_exports__.default=BlockImage;try{BlockImage.displayName="BlockImage",BlockImage.__docgenInfo={description:"BlockImage is a block node (as opposed to inline) containing a\nsingle image. Unlike the classic image type, the block image\nwill take the whole line by default.",displayName:"BlockImage",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/custom-nodes/BlockImage.ts#BlockImage"]={docgenInfo:BlockImage.__docgenInfo,name:"BlockImage",path:"src/custom-nodes/BlockImage.ts#BlockImage"})}catch(__react_docgen_typescript_loader_error){}},116:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(5),__webpack_require__(9),__webpack_require__(11),__webpack_require__(10),__webpack_require__(14),__webpack_require__(35),__webpack_require__(21),__webpack_require__(42),__webpack_require__(33),__webpack_require__(36),__webpack_require__(4),__webpack_require__(37),__webpack_require__(54),__webpack_require__(15),__webpack_require__(12),__webpack_require__(16),__webpack_require__(70);var _OEmbedBase__WEBPACK_IMPORTED_MODULE_17__=__webpack_require__(48);function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _get(target,property,receiver){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function _get(target,property,receiver){var base=function _superPropBase(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(receiver):desc.value}})(target,property,receiver||target)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var logging=__webpack_require__(30)("bobapost:embeds:instagram"),InstagramEmbed=function(_Oembed){!function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(InstagramEmbed,_Oembed);var _super=_createSuper(InstagramEmbed);function InstagramEmbed(){return _classCallCheck(this,InstagramEmbed),_super.apply(this,arguments)}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}(InstagramEmbed,null,[{key:"callEmbedScript",value:function callEmbedScript(){var _window$instgrm;if(logging("Checking if instagram embed script has already been loaded..."),null===(_window$instgrm=window.instgrm)||void 0===_window$instgrm?void 0:_window$instgrm.Embeds)return logging("...found!"),void setTimeout((function(){logging("Calling process!"),window.instgrm.Embeds.process()}),200);logging("...not found!");var fileref=document.createElement("script");fileref.setAttribute("type","text/javascript"),fileref.setAttribute("async",""),fileref.setAttribute("src","https://www.instagram.com/embed.js"),document.body.appendChild(fileref),setTimeout((function(){InstagramEmbed.callEmbedScript()}),1e3)}},{key:"loadPost",value:function loadPost(node,data){_get(_getPrototypeOf(InstagramEmbed),"loadPost",this).call(this,node,data),InstagramEmbed.callEmbedScript()}},{key:"create",value:function create(value){return _get(_getPrototypeOf(InstagramEmbed),"create",this).call(this,value)}}]),InstagramEmbed}(_OEmbedBase__WEBPACK_IMPORTED_MODULE_17__.default);_defineProperty(InstagramEmbed,"EMBED_SCRIPT_URL","https://www.instagram.com/embed.js"),_defineProperty(InstagramEmbed,"LOADING_BACKGROUND_COLOR","#833AB4"),_defineProperty(InstagramEmbed,"LOADING_TEXT","Applying filters..."),_defineProperty(InstagramEmbed,"blotName","instagram-embed"),_defineProperty(InstagramEmbed,"tagName","div"),_defineProperty(InstagramEmbed,"className","ql-oembed-embed"),__webpack_exports__.default=InstagramEmbed},117:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(5),__webpack_require__(9),__webpack_require__(11),__webpack_require__(10),__webpack_require__(14),__webpack_require__(35),__webpack_require__(21),__webpack_require__(42),__webpack_require__(33),__webpack_require__(36),__webpack_require__(4),__webpack_require__(37),__webpack_require__(54),__webpack_require__(15),__webpack_require__(12),__webpack_require__(16);var _OEmbedBase__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__(48);function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _get(target,property,receiver){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function _get(target,property,receiver){var base=function _superPropBase(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(receiver):desc.value}})(target,property,receiver||target)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var logging=__webpack_require__(30)("bobapost:embeds:pixiv"),PixivEmbed=function(_Oembed){!function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(PixivEmbed,_Oembed);var _super=_createSuper(PixivEmbed);function PixivEmbed(){return _classCallCheck(this,PixivEmbed),_super.apply(this,arguments)}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}(PixivEmbed,null,[{key:"getRootNode",value:function getRootNode(mutations){return logging(mutations[0].addedNodes[0]),mutations[0].addedNodes[0]}},{key:"create",value:function create(value){return logging(value),_get(_getPrototypeOf(PixivEmbed),"create",this).call(this,value)}}]),PixivEmbed}(_OEmbedBase__WEBPACK_IMPORTED_MODULE_16__.default);_defineProperty(PixivEmbed,"LOADING_BACKGROUND_COLOR","#0096fa"),_defineProperty(PixivEmbed,"LOADING_TEXT","行っ・・・行っちゃう!"),_defineProperty(PixivEmbed,"SKIP_LOADING",!0),_defineProperty(PixivEmbed,"blotName","pixiv-embed"),_defineProperty(PixivEmbed,"tagName","div"),_defineProperty(PixivEmbed,"className","ql-oembed-embed"),__webpack_exports__.default=PixivEmbed},118:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(5),__webpack_require__(9),__webpack_require__(11),__webpack_require__(10),__webpack_require__(14),__webpack_require__(35),__webpack_require__(21),__webpack_require__(42),__webpack_require__(33),__webpack_require__(36),__webpack_require__(4),__webpack_require__(37),__webpack_require__(54),__webpack_require__(15),__webpack_require__(12),__webpack_require__(16);var _OEmbedBase__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__(48);function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _get(target,property,receiver){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function _get(target,property,receiver){var base=function _superPropBase(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(receiver):desc.value}})(target,property,receiver||target)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var logging=__webpack_require__(30)("bobapost:embeds:reddit"),RedditEmbed=function(_Oembed){!function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(RedditEmbed,_Oembed);var _super=_createSuper(RedditEmbed);function RedditEmbed(){return _classCallCheck(this,RedditEmbed),_super.apply(this,arguments)}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}(RedditEmbed,null,[{key:"getRootNode",value:function getRootNode(mutations){return logging(mutations[0].addedNodes[0]),mutations[0].addedNodes[0]}},{key:"callEmbedScript",value:function callEmbedScript(){var fileref=document.createElement("script");fileref.setAttribute("type","text/javascript"),fileref.setAttribute("async",""),fileref.setAttribute("src",RedditEmbed.EMBED_SCRIPT_URL),document.body.appendChild(fileref)}},{key:"create",value:function create(value){logging(value);var node=_get(_getPrototypeOf(RedditEmbed),"create",this).call(this,value);return RedditEmbed.callEmbedScript(),node}}]),RedditEmbed}(_OEmbedBase__WEBPACK_IMPORTED_MODULE_16__.default);_defineProperty(RedditEmbed,"EMBED_SCRIPT_URL","https://embed.redditmedia.com/widgets/platform.js"),_defineProperty(RedditEmbed,"LOADING_BACKGROUND_COLOR","#FF5700"),_defineProperty(RedditEmbed,"LOADING_TEXT","Thanks for the embed, kind stranger."),_defineProperty(RedditEmbed,"blotName","reddit-embed"),_defineProperty(RedditEmbed,"tagName","div"),_defineProperty(RedditEmbed,"className","ql-oembed-embed"),__webpack_exports__.default=RedditEmbed},119:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(5),__webpack_require__(9),__webpack_require__(11),__webpack_require__(29),__webpack_require__(53),__webpack_require__(10),__webpack_require__(14),__webpack_require__(35),__webpack_require__(21),__webpack_require__(42),__webpack_require__(33),__webpack_require__(36),__webpack_require__(4),__webpack_require__(37),__webpack_require__(54),__webpack_require__(67),__webpack_require__(15),__webpack_require__(12),__webpack_require__(220),__webpack_require__(16),__webpack_require__(70);var quill__WEBPACK_IMPORTED_MODULE_21__=__webpack_require__(13),quill__WEBPACK_IMPORTED_MODULE_21___default=__webpack_require__.n(quill__WEBPACK_IMPORTED_MODULE_21__),axios__WEBPACK_IMPORTED_MODULE_22__=__webpack_require__(346),axios__WEBPACK_IMPORTED_MODULE_22___default=__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_22__),_utils__WEBPACK_IMPORTED_MODULE_23__=__webpack_require__(6);function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _get(target,property,receiver){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function _get(target,property,receiver){var base=function _superPropBase(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(receiver):desc.value}})(target,property,receiver||target)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var BlockEmbed=quill__WEBPACK_IMPORTED_MODULE_21___default.a.import("blots/block/embed"),Link=quill__WEBPACK_IMPORTED_MODULE_21___default.a.import("formats/link"),Icon=quill__WEBPACK_IMPORTED_MODULE_21___default.a.import("ui/icons"),ID_EXTRACT_REGEX=/data-video-id="([0-9]+)"/,getTikTokEmbedId=function getTikTokEmbedId(html){var _html$match;return(null===(_html$match=html.match(ID_EXTRACT_REGEX))||void 0===_html$match?void 0:_html$match[1])||""},attachObserver=function attachObserver(domNode,tikTokNode){new MutationObserver((function(mutations,observer){var _mutations$,_mutations$$removedNo;if("SECTION"==(null===(_mutations$=mutations[0])||void 0===_mutations$||null===(_mutations$$removedNo=_mutations$.removedNodes[0])||void 0===_mutations$$removedNo?void 0:_mutations$$removedNo.nodeName)){var _loadingMessage$paren,loadingMessage=domNode.querySelector(".loading-message");null==loadingMessage||null===(_loadingMessage$paren=loadingMessage.parentNode)||void 0===_loadingMessage$paren||_loadingMessage$paren.removeChild(loadingMessage);var iframe=domNode.querySelector("iframe"),tries=0;setTimeout((function checkNewHeight(){if(iframe.getBoundingClientRect().height>1){domNode.classList.add("loaded"),domNode.classList.remove("loading");var embedSizes=iframe.getBoundingClientRect();return domNode.dataset.embedWidth="".concat(embedSizes.width),domNode.dataset.embedHeight="".concat(embedSizes.height),void TikTokEmbed.onLoadCallback()}++tries<100&&setTimeout(checkNewHeight,100)}),100),observer.disconnect()}})).observe(tikTokNode,{subtree:!0,childList:!0})},TikTokEmbed=function(_BlockEmbed){!function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(TikTokEmbed,_BlockEmbed);var _super=_createSuper(TikTokEmbed);function TikTokEmbed(){return _classCallCheck(this,TikTokEmbed),_super.apply(this,arguments)}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}(TikTokEmbed,null,[{key:"icon",value:function icon(){return""}},{key:"loadVideo",value:function loadVideo(node,data){Object(_utils__WEBPACK_IMPORTED_MODULE_23__.addLoadingMessage)(node,{message:"Hello fellow kids, it's TikTok time™",url:data.url});var tikTokNode=document.createElement("div");tikTokNode.classList.add("tiktok-video"),tikTokNode.innerHTML='\n        <blockquote class="tiktok-embed" cite="'.concat(data.url,'" data-video-id="').concat(data.id,'">\n            <section></section>\n        </blockquote>'),node.dataset.url=data.url,node.dataset.id=data.id,node.appendChild(Object(_utils__WEBPACK_IMPORTED_MODULE_23__.addEmbedOverlay)(tikTokNode,{onClose:function onClose(){var _TikTokEmbed$onRemove;null===(_TikTokEmbed$onRemove=TikTokEmbed.onRemoveRequest)||void 0===_TikTokEmbed$onRemove||_TikTokEmbed$onRemove.call(TikTokEmbed,node)}})),attachObserver(node,tikTokNode);var fileref=document.createElement("script");fileref.setAttribute("type","text/javascript"),fileref.setAttribute("async",""),fileref.setAttribute("src","https://www.tiktok.com/embed.js"),document.body.appendChild(fileref)}},{key:"renderFromUrl",value:function renderFromUrl(node,url){if(url)return TikTokEmbed.getTikTokEmbedFromUrl(url).then((function(res){TikTokEmbed.loadVideo(node,{url:url,id:getTikTokEmbedId(res.data.html)})})).catch((function(err){console.log(err)})),node}},{key:"create",value:function create(value){var node=_get(_getPrototypeOf(TikTokEmbed),"create",this).call(this);return node.contentEditable=!1,node.dataset.rendered=!1,node.classList.add("ql-embed","tiktok","loading"),"string"==typeof value?(Object(_utils__WEBPACK_IMPORTED_MODULE_23__.addLoadingMessage)(node,{message:"Hello fellow kids, it's TikTok time™",url:value}),TikTokEmbed.renderFromUrl(node,this.sanitize(value))):(TikTokEmbed.loadVideo(node,value),node)}},{key:"setOnLoadCallback",value:function setOnLoadCallback(callback){TikTokEmbed.onLoadCallback=callback}},{key:"value",value:function value(domNode){return{id:domNode.dataset.id,url:domNode.dataset.url,embedWidth:domNode.dataset.embedWidth,embedHeight:domNode.dataset.embedHeight}}},{key:"sanitize",value:function sanitize(url){return-1!==url.indexOf("?")&&(url=url.substring(0,url.indexOf("?"))),Link.sanitize(url)}}]),TikTokEmbed}(BlockEmbed);_defineProperty(TikTokEmbed,"embedOptions",{align:"center"}),_defineProperty(TikTokEmbed,"onLoadCallback",(function(){})),_defineProperty(TikTokEmbed,"getTikTokEmbedFromUrl",(function(url){return axios__WEBPACK_IMPORTED_MODULE_22___default.a.get("https://www.tiktok.com/oembed?url=".concat(url))})),TikTokEmbed.blotName="tiktok-embed",TikTokEmbed.tagName="div",TikTokEmbed.className="ql-tiktok-embed",Icon.tiktok=TikTokEmbed.icon(),__webpack_exports__.default=TikTokEmbed;try{TikTokEmbed.displayName="TikTokEmbed",TikTokEmbed.__docgenInfo={description:"TikTokEmbed represents a TikTok video embedded into the editor.",displayName:"TikTokEmbed",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/custom-nodes/TikTokEmbed.ts#TikTokEmbed"]={docgenInfo:TikTokEmbed.__docgenInfo,name:"TikTokEmbed",path:"src/custom-nodes/TikTokEmbed.ts#TikTokEmbed"})}catch(__react_docgen_typescript_loader_error){}},120:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(5),__webpack_require__(9),__webpack_require__(11),__webpack_require__(53),__webpack_require__(10),__webpack_require__(765),__webpack_require__(14),__webpack_require__(35),__webpack_require__(21),__webpack_require__(42),__webpack_require__(33),__webpack_require__(36),__webpack_require__(4),__webpack_require__(37),__webpack_require__(54),__webpack_require__(15),__webpack_require__(12),__webpack_require__(16),__webpack_require__(70);var quill__WEBPACK_IMPORTED_MODULE_19__=__webpack_require__(13),quill__WEBPACK_IMPORTED_MODULE_19___default=__webpack_require__.n(quill__WEBPACK_IMPORTED_MODULE_19__),react__WEBPACK_IMPORTED_MODULE_20__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_20___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_20__),react_dom__WEBPACK_IMPORTED_MODULE_21__=__webpack_require__(71),react_dom__WEBPACK_IMPORTED_MODULE_21___default=__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_21__),_utils__WEBPACK_IMPORTED_MODULE_22__=__webpack_require__(6);function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _get(target,property,receiver){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function _get(target,property,receiver){var base=function _superPropBase(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(receiver):desc.value}})(target,property,receiver||target)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}var BlockEmbed=quill__WEBPACK_IMPORTED_MODULE_19___default.a.import("blots/block/embed"),Link=quill__WEBPACK_IMPORTED_MODULE_19___default.a.import("formats/link"),logging=__webpack_require__(30)("bobapost:embeds:tweet"),loggingVerbose=__webpack_require__(30)("bobapost:embeds:tweet-verbose"),TwitterIcon=function TwitterIcon(props){return react__WEBPACK_IMPORTED_MODULE_20___default.a.createElement("svg",props,react__WEBPACK_IMPORTED_MODULE_20___default.a.createElement("path",{d:"M91.1 239c94.4 0 146-78 146-145.8 0-2.3 0-4.5-.2-6.7 10-7.2 18.7-16.2 25.6-26.5-9.4 4.1-19.3 6.8-29.5 8a51.5 51.5 0 0 0 22.6-28.3c-10 6-21 10.2-32.6 12.4A51.3 51.3 0 0 0 135.6 99C94.4 96.9 56 77.4 30 45.3a51.3 51.3 0 0 0 15.9 68.5 51 51 0 0 1-23.3-6.4v.6a51.3 51.3 0 0 0 41.1 50.3c-7.5 2-15.4 2.4-23.1.9a51.3 51.3 0 0 0 48 35.6 103 103 0 0 1-76 21.3c23.5 15 50.7 23 78.6 23",className:"ql-fill"}))};TwitterIcon.defaultProps={viewBox:"0 0 275 275",xmlns:"http://www.w3.org/2000/svg"};var TweetEmbed=function(_BlockEmbed){!function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(TweetEmbed,_BlockEmbed);var _super=_createSuper(TweetEmbed);function TweetEmbed(){return _classCallCheck(this,TweetEmbed),_super.apply(this,arguments)}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}(TweetEmbed,null,[{key:"doneLoading",value:function doneLoading(node){logging("Removing loading message!"),node.classList.remove("loading");var loadingNode=node.querySelector(".loading-message");loadingNode&&node.removeChild(loadingNode)}},{key:"loadTweet",value:function loadTweet(id,node){var _window,_window$twttr,_window$twttr$widgets,_window2,_window2$twttr,attemptsRemaining=arguments.length>2&&void 0!==arguments[2]?arguments[2]:5;if(null===(_window=window)||void 0===_window||null===(_window$twttr=_window.twttr)||void 0===_window$twttr||null===(_window$twttr$widgets=_window$twttr.widgets)||void 0===_window$twttr$widgets||_window$twttr$widgets.createTweet(id,node,TweetEmbed.tweetOptions).then((function(el){if(logging("Tweet was loaded!"),node.dataset.rendered="true",TweetEmbed.doneLoading(node),!el)return Object(_utils__WEBPACK_IMPORTED_MODULE_22__.addErrorMessage)(node,{message:"This tweet.... it dead.",url:TweetEmbed.value(node).url||""}),void logging("Ooops, there's no tweet there!");if(0==el.getBoundingClientRect().height)node.classList.add("ios-bug"),react_dom__WEBPACK_IMPORTED_MODULE_21___default.a.render(react__WEBPACK_IMPORTED_MODULE_20___default.a.createElement(TwitterIcon,{},null),node),Object(_utils__WEBPACK_IMPORTED_MODULE_22__.addErrorMessage)(node,{message:"You've been hit by... <br />\n             You've been strucky by... <br />\n             A smooth iOS bug.<br />\n             (click to access tweet)",url:TweetEmbed.value(node).url||""}),logging("That damn iOS bug!");else{var embedSizes=el.getBoundingClientRect();node.dataset.embedWidth="".concat(embedSizes.width),node.dataset.embedHeight="".concat(embedSizes.height)}TweetEmbed.onLoadCallback&&setTimeout((function(){return TweetEmbed.onLoadCallback(el)}),100)})).catch((function(e){logging("There was a serious error with tweet creation!"),logging(e),TweetEmbed.doneLoading(node),Object(_utils__WEBPACK_IMPORTED_MODULE_22__.addErrorMessage)(node,{message:"This tweet.... it bad.<br />(".concat(e.message,")"),url:TweetEmbed.value(node).url||""})})),!(null===(_window2=window)||void 0===_window2||null===(_window2$twttr=_window2.twttr)||void 0===_window2$twttr?void 0:_window2$twttr.widgets)){if(logging("Twitter main library is not loaded."),logging("".concat(attemptsRemaining," reload attempts remaining")),!attemptsRemaining)return logging("We're out of attempts! Time to panic!"),TweetEmbed.doneLoading(node),void Object(_utils__WEBPACK_IMPORTED_MODULE_22__.addErrorMessage)(node,{message:"The Twitter Embeds library... it dead.",url:TweetEmbed.value(node).url||""});setTimeout((function(){return TweetEmbed.loadTweet(id,node,attemptsRemaining-1)}),50)}}},{key:"renderTweets",value:function renderTweets(){for(var tweets=document.querySelectorAll("div.ql-tweet"),i=0;i<tweets.length;i++){for(;tweets[i].firstChild;)tweets[i].removeChild(tweets[i].firstChild);TweetEmbed.loadTweet(tweets[i].dataset.id||"",tweets[i])}}},{key:"create",value:function create(value){var node=_get(_getPrototypeOf(TweetEmbed),"create",this).call(this);logging("Creating new tweet embed with value ".concat(value));var url="string"==typeof value?this.sanitize(value):value.url,id=url.substr(url.lastIndexOf("/")+1);return node.dataset.url=url,node.contentEditable=!1,node.dataset.id=id,node.dataset.rendered=!1,logging("Tweet url: ".concat(url)),logging("Tweet id: ".concat(id)),Object(_utils__WEBPACK_IMPORTED_MODULE_22__.addLoadingMessage)(node,{message:"Preparing to chirp...",url:url,width:value.embedWidth,height:value.embedHeight}),Object(_utils__WEBPACK_IMPORTED_MODULE_22__.addEmbedOverlay)(node,{onClose:function onClose(){var _TweetEmbed$onRemoveR;null===(_TweetEmbed$onRemoveR=TweetEmbed.onRemoveRequest)||void 0===_TweetEmbed$onRemoveR||_TweetEmbed$onRemoveR.call(TweetEmbed,node)}}),node.classList.add("ql-embed","tweet","loading"),TweetEmbed.loadTweet(id,node),node}},{key:"setOnLoadCallback",value:function setOnLoadCallback(callback){TweetEmbed.onLoadCallback=callback}},{key:"value",value:function value(domNode){return loggingVerbose("Getting value of embed from data:"),loggingVerbose(domNode.dataset),{url:domNode.dataset.url,embedWidth:domNode.dataset.embedWidth,embedHeight:domNode.dataset.embedHeight}}},{key:"sanitize",value:function sanitize(url){return-1!==url.indexOf("?")&&(url=url.substring(0,url.indexOf("?"))),Link.sanitize(url)}}]),TweetEmbed}(BlockEmbed);!function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(TweetEmbed,"tweetOptions",{theme:"dark",width:550,align:"center"}),TweetEmbed.blotName="tweet",TweetEmbed.tagName="div",TweetEmbed.className="ql-tweet",__webpack_exports__.default=TweetEmbed;try{TweetEmbed.displayName="TweetEmbed",TweetEmbed.__docgenInfo={description:"TweetEmbed represents a tweet embedded into the editor.\n\nNote: the twitter JS library must be installed for the tweets to\nactually load.",displayName:"TweetEmbed",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/custom-nodes/TweetEmbed.ts#TweetEmbed"]={docgenInfo:TweetEmbed.__docgenInfo,name:"TweetEmbed",path:"src/custom-nodes/TweetEmbed.ts#TweetEmbed"})}catch(__react_docgen_typescript_loader_error){}},121:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(5),__webpack_require__(9),__webpack_require__(11),__webpack_require__(10),__webpack_require__(14),__webpack_require__(35),__webpack_require__(21),__webpack_require__(42),__webpack_require__(33),__webpack_require__(36),__webpack_require__(4),__webpack_require__(37),__webpack_require__(54),__webpack_require__(15),__webpack_require__(12),__webpack_require__(16);var _OEmbedBase__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__(48);function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _get(target,property,receiver){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function _get(target,property,receiver){var base=function _superPropBase(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(receiver):desc.value}})(target,property,receiver||target)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var logging=__webpack_require__(30)("bobapost:embeds:vimeo"),VimeoEmbed=function(_Oembed){!function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(VimeoEmbed,_Oembed);var _super=_createSuper(VimeoEmbed);function VimeoEmbed(){return _classCallCheck(this,VimeoEmbed),_super.apply(this,arguments)}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}(VimeoEmbed,null,[{key:"getRootNode",value:function getRootNode(mutations){return logging(mutations[0].addedNodes[0]),mutations[0].addedNodes[0]}},{key:"create",value:function create(value){return logging(value),_get(_getPrototypeOf(VimeoEmbed),"create",this).call(this,value)}}]),VimeoEmbed}(_OEmbedBase__WEBPACK_IMPORTED_MODULE_16__.default);_defineProperty(VimeoEmbed,"LOADING_BACKGROUND_COLOR","#1dbae8"),_defineProperty(VimeoEmbed,"LOADING_TEXT","Time for the COOLER YouTube..."),_defineProperty(VimeoEmbed,"SKIP_LOADING",!0),_defineProperty(VimeoEmbed,"blotName","vimeo-embed"),_defineProperty(VimeoEmbed,"tagName","div"),_defineProperty(VimeoEmbed,"className","ql-oembed-embed"),__webpack_exports__.default=VimeoEmbed},122:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(5),__webpack_require__(9),__webpack_require__(11),__webpack_require__(29),__webpack_require__(53),__webpack_require__(10),__webpack_require__(14),__webpack_require__(35),__webpack_require__(21),__webpack_require__(42),__webpack_require__(33),__webpack_require__(36),__webpack_require__(4),__webpack_require__(37),__webpack_require__(54),__webpack_require__(15),__webpack_require__(12),__webpack_require__(210),__webpack_require__(16),__webpack_require__(324);var quill__WEBPACK_IMPORTED_MODULE_20__=__webpack_require__(13),quill__WEBPACK_IMPORTED_MODULE_20___default=__webpack_require__.n(quill__WEBPACK_IMPORTED_MODULE_20__),_utils__WEBPACK_IMPORTED_MODULE_21__=__webpack_require__(6);function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _get(target,property,receiver){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function _get(target,property,receiver){var base=function _superPropBase(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(receiver):desc.value}})(target,property,receiver||target)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}var BlockEmbed=quill__WEBPACK_IMPORTED_MODULE_20___default.a.import("blots/block/embed"),Link=quill__WEBPACK_IMPORTED_MODULE_20___default.a.import("formats/link"),logging=__webpack_require__(30)("bobapost:embeds:youtube"),YouTubeEmbed=function(_BlockEmbed){!function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(YouTubeEmbed,_BlockEmbed);var _super=_createSuper(YouTubeEmbed);function YouTubeEmbed(){return _classCallCheck(this,YouTubeEmbed),_super.apply(this,arguments)}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}(YouTubeEmbed,null,[{key:"create",value:function create(value){var node=_get(_getPrototypeOf(YouTubeEmbed),"create",this).call(this),url=new URL(value);if(logging("Creating new youtube video embed with url ".concat(url)),url){var videoUrl;videoUrl=url.href.startsWith("https://www.youtube.com/embed/")?value:url.href.startsWith("https://youtu.be/")?"https://www.youtube.com/embed/".concat(url.pathname.substring(1),"?start=").concat(url.searchParams.get("t")):"https://www.youtube.com/embed/".concat(url.searchParams.get("v"),"?start=").concat(url.searchParams.get("t")),logging("Embed url ".concat(videoUrl));var embedFrame=document.createElement("iframe");return embedFrame.setAttribute("src",this.sanitize(videoUrl)),embedFrame.frameBorder="0",embedFrame.allow="accelerometer; encrypted-media; gyroscope; picture-in-picture",embedFrame.allowFullscreen=!0,Object(_utils__WEBPACK_IMPORTED_MODULE_21__.addLoadingMessage)(node,{message:"Loading Influencers-birthing Machine...",url:url.toString()}),Object(_utils__WEBPACK_IMPORTED_MODULE_21__.addEmbedOverlay)(node,{onClose:function onClose(){var _YouTubeEmbed$onRemov;null===(_YouTubeEmbed$onRemov=YouTubeEmbed.onRemoveRequest)||void 0===_YouTubeEmbed$onRemov||_YouTubeEmbed$onRemov.call(YouTubeEmbed,node)}}),node.style.position="relative",node.style.width="100%",node.style.height="0",node.style.paddingBottom="56.25%",node.contentEditable="false",node.classList.add("ql-embed","youtube","loading"),node.appendChild(embedFrame),embedFrame.onload=function(){var _YouTubeEmbed$onLoadC;node.classList.remove("loading"),null===(_YouTubeEmbed$onLoadC=YouTubeEmbed.onLoadCallback)||void 0===_YouTubeEmbed$onLoadC||_YouTubeEmbed$onLoadC.call(YouTubeEmbed),node.removeChild(node.querySelector(".loading-message"))},node}Object(_utils__WEBPACK_IMPORTED_MODULE_21__.addErrorMessage)(node,{message:"There's no url for this video!",url:"#"})}},{key:"setOnLoadCallback",value:function setOnLoadCallback(callback){YouTubeEmbed.onLoadCallback=callback}},{key:"value",value:function value(domNode){var _domNode$querySelecto;return null===(_domNode$querySelecto=domNode.querySelector("iframe"))||void 0===_domNode$querySelecto?void 0:_domNode$querySelecto.src}},{key:"sanitize",value:function sanitize(url){return-1!==url.indexOf("?")&&(url=url.substring(0,url.indexOf("?"))),Link.sanitize(url)}}]),YouTubeEmbed}(BlockEmbed);!function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(YouTubeEmbed,"embedOptions",{align:"center"}),YouTubeEmbed.blotName="youtube-video",YouTubeEmbed.tagName="div",YouTubeEmbed.className="ql-youtube-video",__webpack_exports__.default=YouTubeEmbed;try{YouTubeEmbed.displayName="YouTubeEmbed",YouTubeEmbed.__docgenInfo={description:"YouTubeEmbed represents a youtube video embedded into the editor.",displayName:"YouTubeEmbed",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/custom-nodes/YouTubeEmbed.ts#YouTubeEmbed"]={docgenInfo:YouTubeEmbed.__docgenInfo,name:"YouTubeEmbed",path:"src/custom-nodes/YouTubeEmbed.ts#YouTubeEmbed"})}catch(__react_docgen_typescript_loader_error){}},124:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var styled_jsx_style__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(31),styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0__),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);__webpack_exports__.default=function(props){return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a,{id:"170856486"},[".ql-embed .error-message{width:100%;height:50px;background-color:red;border-radius:5px;text-align:center;line-height:50px;color:white;margin:10px 0;}",'.ql-embed.ios-bug .error-message{width:100%;height:150px;background-color:black;border-radius:15px;text-align:center;line-height:25px;color:white;font-family:system-ui,-apple-system,BlinkMacSystemFont,"Segoe UI", Roboto,Ubuntu,"Helvetica Neue",sans-serif;padding:20px;margin:10px 0;}',".ql-embed.ios-bug > svg{position:absolute;width:50px;left:10px;top:10px;}",".tweet .loading-message{width:100%;min-height:50px;background-color:#1da1f2;margin:10px 0;text-align:center;border-radius:15px;line-height:50px;color:white;position:relative;}",".ql-embed{position:relative;}",".ql-embed a{color:white;cursor:pointer;}",".ql-embed a:hover{color:white;cursor:pointer;}",".ql-block-image{text-align:center;margin:10px 0;}",".ql-block-image img{max-width:100%;height:auto;}",".ql-youtube-video{text-align:center;margin:10px 0;background-color:#ff0000;border-radius:15px;}",".ql-youtube-video iframe{position:absolute;top:0;left:0;width:100%;height:100%;}",".ql-tiktok-embed.loading{background-color:aquamarine;padding:30px;text-align:center;color:white;height:80px;}",".ql-youtube-video .loading-message{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);}",".ql-tiktok-embed.loading .loading-message{position:relative;margin-bottom:50px;}",".tiktok-video{white-space:normal;}",".tiktok-video blockquote{border-left:0 !important;padding:0 !important;}",".ql-tumblr-embed.loading{background-color:#34526f;text-align:center;color:white;min-height:80px;}",".ql-tumblr-embed .loading-message{position:relative;margin-bottom:50px;}",".embed-overlay{position:absolute;top:0;right:0;left:0;bottom:0;pointer-events:none;}",".close-button{width:35px;height:35px;background-color:#444;position:absolute;border:3px solid #ccc;top:0;right:0;-webkit-transform:translate(50%,-50%);-ms-transform:translate(50%,-50%);transform:translate(50%,-50%);border-radius:50%;pointer-events:all;z-index:2;}",".close-button svg{fill:#ccc;top:50%;left:50%;display:block;position:absolute;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);}",".close-button:hover svg,.close-button:hover{fill:white;border-color:white;cursor:pointer;}",".editor.view-only .close-button{display:none;}",".inline-spoilers{padding:1px;border:1px dashed black;background-color:#e6dede;}",".inline-spoilers:hover{cursor:pointer;}",".view-only .inline-spoilers{color:transparent;background-color:black;}",".view-only .inline-spoilers.visible{background-color:transparent;color:inherit;}",".view-only .options-overlay{display:none;}",".options-overlay{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;background-color:#444;max-width:300px;border-radius:15px;padding:5px 15px;margin-top:5px;pointer-events:all;position:relative;z-index:2;}",".spoilers-button{height:20px;width:20px;}",".spoilers-button.active .ql-fill{fill:white;}",".spoilers-button:hover{cursor:pointer;}",".spoilers-button > svg{height:20px;width:20px;}",".view-only .embed-overlay.spoilers::after{opacity:1;}",".view-only .embed-overlay.spoilers{pointer-events:all;}",".view-only .embed-overlay.spoilers:hover{cursor:pointer;}",'.embed-overlay.spoilers::after{content:"";background-image:url(https://firebasestorage.googleapis.com/v0/b/bobaboard-fb.appspot.com/o/images%2Fadmin%2Fspoilers.png?alt=media&token=a343aee0-e90f-4379-8d41-1cac1f65f7ee);background-position:center;background-size:cover;position:absolute;top:0;right:0;left:0;bottom:0;opacity:0.1;}',".view-only img.spoilers{visibility:hidden;}",".view-only .show-spoilers img.spoilers{visibility:visible;}",".show-spoilers .embed-overlay.spoilers::after{visibility:hidden;}",".show-spoilers .embed-overlay.spoilers{display:none;}",".show-spoilers img:hover{cursor:pointer;}",".ql-oembed-embed{white-space:normal;}",".ql-oembed-embed .embed-node.loading{visibility:hidden;}",".ql-oembed-embed .loading-message,.ql-tumblr-embed .loading-message{width:100%;height:50px;margin:10px 0;text-align:center;border-radius:15px;line-height:50px;color:white;position:relative;}",".ql-oembed-embed .loading-message a,.ql-tumblr-embed .loading-message a,.tweet .loading-message a{position:absolute !important;top:0;left:0;bottom:0;right:0;}"]))};try{CustomNodesStyle.displayName="CustomNodesStyle",CustomNodesStyle.__docgenInfo={description:"",displayName:"CustomNodesStyle",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/custom-nodes/CustomNodesStyle.tsx#CustomNodesStyle"]={docgenInfo:CustomNodesStyle.__docgenInfo,name:"CustomNodesStyle",path:"src/custom-nodes/CustomNodesStyle.tsx#CustomNodesStyle"})}catch(__react_docgen_typescript_loader_error){}try{CustomNodesStyle.displayName="CustomNodesStyle",CustomNodesStyle.__docgenInfo={description:"",displayName:"CustomNodesStyle",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/custom-nodes/CustomNodesStyle.tsx#CustomNodesStyle"]={docgenInfo:CustomNodesStyle.__docgenInfo,name:"CustomNodesStyle",path:"src/custom-nodes/CustomNodesStyle.tsx#CustomNodesStyle"})}catch(__react_docgen_typescript_loader_error){}},162:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return InlineSpoilers}));__webpack_require__(5),__webpack_require__(9),__webpack_require__(11),__webpack_require__(10),__webpack_require__(14),__webpack_require__(35),__webpack_require__(21),__webpack_require__(42),__webpack_require__(33),__webpack_require__(36),__webpack_require__(4),__webpack_require__(37),__webpack_require__(54),__webpack_require__(15),__webpack_require__(12),__webpack_require__(16);var quill__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__(13);function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _get(target,property,receiver){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function _get(target,property,receiver){var base=function _superPropBase(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(receiver):desc.value}})(target,property,receiver||target)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var Inline=__webpack_require__.n(quill__WEBPACK_IMPORTED_MODULE_16__).a.import("blots/inline"),log=__webpack_require__(30)("bobapost:styles:spoilers"),InlineSpoilers=function(_Inline){!function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(InlineSpoilers,_Inline);var _super=_createSuper(InlineSpoilers);function InlineSpoilers(domNode){var _this;return function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,InlineSpoilers),_this=_super.call(this,domNode),domNode.addEventListener("click",(function(){log("Changing visibility of spoilers!"),domNode.classList.toggle("visible")})),_this}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}(InlineSpoilers,[{key:"optimize",value:function optimize(context){_get(_getPrototypeOf(InlineSpoilers.prototype),"optimize",this).call(this,context);for(var next=this,adjacentSpoilers=[];null===(_next=next)||void 0===_next||null===(_next$domNode=_next.domNode)||void 0===_next$domNode||null===(_next$domNode$classLi=_next$domNode.classList)||void 0===_next$domNode$classLi?void 0:_next$domNode$classLi.contains("inline-spoilers");){var _next,_next$domNode,_next$domNode$classLi;adjacentSpoilers.push(next),next=next.next}log("Found ".concat(adjacentSpoilers.length," adjacent spoiler nodes."));for(var i=1;i<adjacentSpoilers.length;i++)log("Merging node ".concat(i+1)),adjacentSpoilers[i].moveChildren(this),adjacentSpoilers[i].remove()}}],[{key:"formats",value:function formats(domNode){return log("Formatting spoilers node."),_get(_getPrototypeOf(InlineSpoilers),"formats",this).call(this,domNode),!0}}]),InlineSpoilers}(Inline);_defineProperty(InlineSpoilers,"blotName","inline-spoilers"),_defineProperty(InlineSpoilers,"tagName","SPAN"),_defineProperty(InlineSpoilers,"className","inline-spoilers")},3:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"e",(function(){return setTumblrEmbedFetcher})),__webpack_require__.d(__webpack_exports__,"d",(function(){return setOEmbedFetcher})),__webpack_require__.d(__webpack_exports__,"b",(function(){return getAllImages})),__webpack_require__.d(__webpack_exports__,"c",(function(){return replaceImages}));__webpack_require__(5),__webpack_require__(9),__webpack_require__(11),__webpack_require__(29),__webpack_require__(204),__webpack_require__(45),__webpack_require__(10),__webpack_require__(97),__webpack_require__(14),__webpack_require__(35),__webpack_require__(21),__webpack_require__(33),__webpack_require__(36),__webpack_require__(4),__webpack_require__(37),__webpack_require__(15),__webpack_require__(12),__webpack_require__(47),__webpack_require__(16);var QuillModule,style=__webpack_require__(31),style_default=__webpack_require__.n(style),react=__webpack_require__(0),react_default=__webpack_require__.n(react),server_browser=__webpack_require__(345),classnames=__webpack_require__(125),classnames_default=__webpack_require__.n(classnames);__webpack_require__(80),__webpack_require__(61),__webpack_require__(34),__webpack_require__(46),__webpack_require__(41),__webpack_require__(67),__webpack_require__(283),__webpack_require__(210),__webpack_require__(739),__webpack_require__(740);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}"undefined"!=typeof window&&(QuillModule=__webpack_require__(13));var logging=__webpack_require__(30)("bobapost:quillUtils"),detectNewLine=function detectNewLine(editor){if(!editor.getSelection())return null;var _editor$getLine2=_slicedToArray(editor.getLine(editor.getSelection().index),2),line=_editor$getLine2[0];_editor$getLine2[1];return line.cache&&1===line.cache.length?editor.getBounds(editor.getSelection().index):null},withNoLinebreakHandler=function withNoLinebreakHandler(quillKeyboardConfig){var Keyboard=QuillModule.import("modules/keyboard");quillKeyboardConfig.bindings.noLinebreak={key:Keyboard.keys.ENTER,shiftKey:null,shortKey:!1,handler:function handler(){return!1}}},removeLineBreaksFromPaste=function removeLineBreaksFromPaste(pasteEvent){var _pasteEvent$clipboard;logging("Past event detected!");var paste=null===(_pasteEvent$clipboard=pasteEvent.clipboardData)||void 0===_pasteEvent$clipboard?void 0:_pasteEvent$clipboard.getData("text/plain");logging("Pasted data:"),logging(paste);var selection=window.getSelection();return!(!selection||!selection.rangeCount)&&(selection.deleteFromDocument(),selection.getRangeAt(0).insertNode(document.createTextNode(paste.replace(/(\r\n|\n|\r)/gm," "))),window.getSelection().collapseToEnd(),pasteEvent.preventDefault(),pasteEvent.stopPropagation(),!0)},imageNodeNames=["image","block-image"],getAllImages=function getAllImages(delta){var images=[];return delta.forEach((function(deltaOp){imageNodeNames.forEach((function(imageNode){if(deltaOp.insert&&deltaOp.insert[imageNode]){var src=deltaOp.insert[imageNode].src||deltaOp.insert[imageNode];images.push(src)}}))})),images},removeTrailingWhitespace=function removeTrailingWhitespace(delta){var lastNotEmpty=null;delta.forEach((function(deltaOp,index){"string"==typeof deltaOp.insert&&""===deltaOp.insert.trim()||(lastNotEmpty=index)}));var resultDelta=lastNotEmpty&&lastNotEmpty!=delta.length-1?delta.filter((function(op,index){return index<=lastNotEmpty})):delta;return"string"==typeof resultDelta[resultDelta.length-1].insert&&(resultDelta[resultDelta.length-1].insert=resultDelta[resultDelta.length-1].insert.trimRight()),resultDelta},replaceImages=function replaceImages(delta,replacements){delta.forEach((function(deltaOp){imageNodeNames.forEach((function(imageNode){deltaOp.insert&&deltaOp.insert[imageNode]&&(replacements[deltaOp.insert[imageNode]]||replacements[deltaOp.insert[imageNode].src])&&(deltaOp.insert[imageNode].src?deltaOp.insert[imageNode].src=replacements[deltaOp.insert[imageNode].src]:deltaOp.insert[imageNode]=replacements[deltaOp.insert[imageNode]])}))}))};try{detectNewLine.displayName="detectNewLine",detectNewLine.__docgenInfo={description:"",displayName:"detectNewLine",props:{root:{defaultValue:null,description:"@private Internal API",name:"root",required:!0,type:{name:"HTMLDivElement"}},clipboard:{defaultValue:null,description:"",name:"clipboard",required:!0,type:{name:"ClipboardStatic"}},scroll:{defaultValue:null,description:"",name:"scroll",required:!0,type:{name:"Blot"}},keyboard:{defaultValue:null,description:"",name:"keyboard",required:!0,type:{name:"KeyboardStatic"}},deleteText:{defaultValue:null,description:"",name:"deleteText",required:!0,type:{name:"(index: number, length: number, source?: Sources) => Delta"}},disable:{defaultValue:null,description:"",name:"disable",required:!0,type:{name:"() => void"}},enable:{defaultValue:null,description:"",name:"enable",required:!0,type:{name:"(enabled?: boolean) => void"}},getContents:{defaultValue:null,description:"",name:"getContents",required:!0,type:{name:"(index?: number, length?: number) => Delta"}},getLength:{defaultValue:null,description:"",name:"getLength",required:!0,type:{name:"() => number"}},getText:{defaultValue:null,description:"",name:"getText",required:!0,type:{name:"(index?: number, length?: number) => string"}},insertEmbed:{defaultValue:null,description:"",name:"insertEmbed",required:!0,type:{name:"(index: number, type: string, value: any, source?: Sources) => Delta"}},insertText:{defaultValue:null,description:"",name:"insertText",required:!0,type:{name:"{ (index: number, text: string, source?: Sources): Delta; (index: number, text: string, format: string, value: any, source?: Sources): Delta; (index: number, text: string, formats: StringMap, source?: Sources): Delta; }"}},pasteHTML:{defaultValue:null,description:"@deprecated Remove in 2.0. Use clipboard.dangerouslyPasteHTML(index: number, html: string, source: Sources)\n@deprecated Remove in 2.0. Use clipboard.dangerouslyPasteHTML(html: string, source: Sources): void;",name:"pasteHTML",required:!0,type:{name:"{ (index: number, html: string, source?: Sources): string; (html: string, source?: Sources): string; }"}},setContents:{defaultValue:null,description:"",name:"setContents",required:!0,type:{name:"(delta: Delta, source?: Sources) => Delta"}},setText:{defaultValue:null,description:"",name:"setText",required:!0,type:{name:"(text: string, source?: Sources) => Delta"}},update:{defaultValue:null,description:"",name:"update",required:!0,type:{name:"(source?: Sources) => void"}},updateContents:{defaultValue:null,description:"",name:"updateContents",required:!0,type:{name:"(delta: Delta, source?: Sources) => Delta"}},format:{defaultValue:null,description:"",name:"format",required:!0,type:{name:"(name: string, value: any, source?: Sources) => Delta"}},formatLine:{defaultValue:null,description:"",name:"formatLine",required:!0,type:{name:"{ (index: number, length: number, source?: Sources): Delta; (index: number, length: number, format: string, value: any, source?: Sources): Delta; (index: number, length: number, formats: StringMap, source?: Sources): Delta; }"}},formatText:{defaultValue:null,description:"",name:"formatText",required:!0,type:{name:"{ (index: number, length: number, source?: Sources): Delta; (index: number, length: number, format: string, value: any, source?: Sources): Delta; (index: number, length: number, formats: StringMap, source?: Sources): Delta; (range: RangeStatic, format: string, value: any, source?: Sources): Delta; (range: RangeStati..."}},getFormat:{defaultValue:null,description:"",name:"getFormat",required:!0,type:{name:"{ (range?: RangeStatic): StringMap; (index: number, length?: number): StringMap; }"}},removeFormat:{defaultValue:null,description:"",name:"removeFormat",required:!0,type:{name:"(index: number, length: number, source?: Sources) => Delta"}},blur:{defaultValue:null,description:"",name:"blur",required:!0,type:{name:"() => void"}},focus:{defaultValue:null,description:"",name:"focus",required:!0,type:{name:"() => void"}},getBounds:{defaultValue:null,description:"",name:"getBounds",required:!0,type:{name:"(index: number, length?: number) => BoundsStatic"}},getSelection:{defaultValue:null,description:"",name:"getSelection",required:!0,type:{name:"{ (focus: true): RangeStatic; (focus?: false): RangeStatic; }"}},hasFocus:{defaultValue:null,description:"",name:"hasFocus",required:!0,type:{name:"() => boolean"}},setSelection:{defaultValue:null,description:"",name:"setSelection",required:!0,type:{name:"{ (index: number, length: number, source?: Sources): void; (range: RangeStatic, source?: Sources): void; }"}},addContainer:{defaultValue:null,description:"",name:"addContainer",required:!0,type:{name:"(classNameOrDomNode: string | Node, refNode?: Node) => any"}},getModule:{defaultValue:null,description:"",name:"getModule",required:!0,type:{name:"(name: string) => any"}},getIndex:{defaultValue:null,description:"",name:"getIndex",required:!0,type:{name:"(blot: any) => number"}},getLeaf:{defaultValue:null,description:"",name:"getLeaf",required:!0,type:{name:"(index: number) => any"}},getLine:{defaultValue:null,description:"",name:"getLine",required:!0,type:{name:"(index: number) => [any, number]"}},getLines:{defaultValue:null,description:"",name:"getLines",required:!0,type:{name:"{ (index?: number, length?: number): any[]; (range: RangeStatic): any[]; }"}},on:{defaultValue:null,description:"",name:"on",required:!0,type:{name:'{ (eventName: "text-change", handler: TextChangeHandler): EventEmitter; (eventName: "selection-change", handler: SelectionChangeHandler): EventEmitter; (eventName: "editor-change", handler: EditorChangeHandler): EventEmitter; }'}},once:{defaultValue:null,description:"",name:"once",required:!0,type:{name:'{ (eventName: "text-change", handler: TextChangeHandler): EventEmitter; (eventName: "selection-change", handler: SelectionChangeHandler): EventEmitter; (eventName: "editor-change", handler: EditorChangeHandler): EventEmitter; }'}},off:{defaultValue:null,description:"",name:"off",required:!0,type:{name:'{ (eventName: "text-change", handler: TextChangeHandler): EventEmitter; (eventName: "selection-change", handler: SelectionChangeHandler): EventEmitter; (eventName: "editor-change", handler: EditorChangeHandler): EventEmitter; }'}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/quillUtils.ts#detectNewLine"]={docgenInfo:detectNewLine.__docgenInfo,name:"detectNewLine",path:"src/quillUtils.ts#detectNewLine"})}catch(__react_docgen_typescript_loader_error){}try{withNoLinebreakHandler.displayName="withNoLinebreakHandler",withNoLinebreakHandler.__docgenInfo={description:"",displayName:"withNoLinebreakHandler",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/quillUtils.ts#withNoLinebreakHandler"]={docgenInfo:withNoLinebreakHandler.__docgenInfo,name:"withNoLinebreakHandler",path:"src/quillUtils.ts#withNoLinebreakHandler"})}catch(__react_docgen_typescript_loader_error){}try{removeLineBreaksFromPaste.displayName="removeLineBreaksFromPaste",removeLineBreaksFromPaste.__docgenInfo={description:"",displayName:"removeLineBreaksFromPaste",props:{clipboardData:{defaultValue:null,description:"",name:"clipboardData",required:!0,type:{name:"DataTransfer"}},nativeEvent:{defaultValue:null,description:"",name:"nativeEvent",required:!0,type:{name:"ClipboardEvent"}},currentTarget:{defaultValue:null,description:"",name:"currentTarget",required:!0,type:{name:"EventTarget & Element"}},target:{defaultValue:null,description:"",name:"target",required:!0,type:{name:"EventTarget"}},bubbles:{defaultValue:null,description:"",name:"bubbles",required:!0,type:{name:"boolean"}},cancelable:{defaultValue:null,description:"",name:"cancelable",required:!0,type:{name:"boolean"}},defaultPrevented:{defaultValue:null,description:"",name:"defaultPrevented",required:!0,type:{name:"boolean"}},eventPhase:{defaultValue:null,description:"",name:"eventPhase",required:!0,type:{name:"number"}},isTrusted:{defaultValue:null,description:"",name:"isTrusted",required:!0,type:{name:"boolean"}},preventDefault:{defaultValue:null,description:"",name:"preventDefault",required:!0,type:{name:"() => void"}},isDefaultPrevented:{defaultValue:null,description:"",name:"isDefaultPrevented",required:!0,type:{name:"() => boolean"}},stopPropagation:{defaultValue:null,description:"",name:"stopPropagation",required:!0,type:{name:"() => void"}},isPropagationStopped:{defaultValue:null,description:"",name:"isPropagationStopped",required:!0,type:{name:"() => boolean"}},persist:{defaultValue:null,description:"",name:"persist",required:!0,type:{name:"() => void"}},timeStamp:{defaultValue:null,description:"",name:"timeStamp",required:!0,type:{name:"number"}},type:{defaultValue:null,description:"",name:"type",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/quillUtils.ts#removeLineBreaksFromPaste"]={docgenInfo:removeLineBreaksFromPaste.__docgenInfo,name:"removeLineBreaksFromPaste",path:"src/quillUtils.ts#removeLineBreaksFromPaste"})}catch(__react_docgen_typescript_loader_error){}try{getAllImages.displayName="getAllImages",getAllImages.__docgenInfo={description:"",displayName:"getAllImages",props:{length:{defaultValue:null,description:"Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",name:"length",required:!0,type:{name:"number"}},toString:{defaultValue:null,description:"Returns a string representation of an array.",name:"toString",required:!1,type:{name:"() => string"}},toLocaleString:{defaultValue:null,description:"Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",name:"toLocaleString",required:!1,type:{name:"() => string"}},pop:{defaultValue:null,description:"Removes the last element from an array and returns it.",name:"pop",required:!0,type:{name:"() => DeltaOperation"}},push:{defaultValue:null,description:"Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",name:"push",required:!0,type:{name:"(...items: DeltaOperation[]) => number"}},concat:{defaultValue:null,description:"Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",name:"concat",required:!0,type:{name:"{ (...items: ConcatArray<DeltaOperation>[]): DeltaOperation[]; (...items: (DeltaOperation | ConcatArray<DeltaOperation>)[]): DeltaOperation[]; }"}},join:{defaultValue:null,description:"Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",name:"join",required:!0,type:{name:"(separator?: string) => string"}},reverse:{defaultValue:null,description:"Reverses the elements in an Array.",name:"reverse",required:!0,type:{name:"() => DeltaOperation[]"}},shift:{defaultValue:null,description:"Removes the first element from an array and returns it.",name:"shift",required:!0,type:{name:"() => DeltaOperation"}},slice:{defaultValue:null,description:"Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.",name:"slice",required:!0,type:{name:"(start?: number, end?: number) => DeltaOperation[]"}},sort:{defaultValue:null,description:"Sorts an array.\n@param compareFn Function used to determine the order of the elements. It is expected to return\ra negative value if first argument is less than second argument, zero if they're equal and a positive\rvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r```ts\r[11,2,22,1].sort((a, b) => a - b)\r```",name:"sort",required:!0,type:{name:"(compareFn?: (a: DeltaOperation, b: DeltaOperation) => number) => DeltaOperation[]"}},splice:{defaultValue:null,description:"Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",name:"splice",required:!0,type:{name:"{ (start: number, deleteCount?: number): DeltaOperation[]; (start: number, deleteCount: number, ...items: DeltaOperation[]): DeltaOperation[]; }"}},unshift:{defaultValue:null,description:"Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",name:"unshift",required:!0,type:{name:"(...items: DeltaOperation[]) => number"}},indexOf:{defaultValue:null,description:"Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",name:"indexOf",required:!0,type:{name:"(searchElement: DeltaOperation, fromIndex?: number) => number"}},lastIndexOf:{defaultValue:null,description:"Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",name:"lastIndexOf",required:!0,type:{name:"(searchElement: DeltaOperation, fromIndex?: number) => number"}},every:{defaultValue:null,description:"Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",name:"every",required:!0,type:{name:"(callbackfn: (value: DeltaOperation, index: number, array: DeltaOperation[]) => unknown, thisArg?: any) => boolean"}},some:{defaultValue:null,description:"Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",name:"some",required:!0,type:{name:"(callbackfn: (value: DeltaOperation, index: number, array: DeltaOperation[]) => unknown, thisArg?: any) => boolean"}},forEach:{defaultValue:null,description:"Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"forEach",required:!0,type:{name:"(callbackfn: (value: DeltaOperation, index: number, array: DeltaOperation[]) => void, thisArg?: any) => void"}},map:{defaultValue:null,description:"Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"map",required:!0,type:{name:"<U>(callbackfn: (value: DeltaOperation, index: number, array: DeltaOperation[]) => U, thisArg?: any) => U[]"}},filter:{defaultValue:null,description:"Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"filter",required:!0,type:{name:"{ <S extends DeltaOperation>(callbackfn: (value: DeltaOperation, index: number, array: DeltaOperation[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: DeltaOperation, index: number, array: DeltaOperation[]) => unknown, thisArg?: any): DeltaOperation[]; }"}},reduce:{defaultValue:null,description:"Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",name:"reduce",required:!0,type:{name:"{ (callbackfn: (previousValue: DeltaOperation, currentValue: DeltaOperation, currentIndex: number, array: DeltaOperation[]) => DeltaOperation): DeltaOperation; (callbackfn: (previousValue: DeltaOperation, currentValue: DeltaOperation, currentIndex: number, array: DeltaOperation[]) => DeltaOperation, initialValue: De..."}},reduceRight:{defaultValue:null,description:"Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",name:"reduceRight",required:!0,type:{name:"{ (callbackfn: (previousValue: DeltaOperation, currentValue: DeltaOperation, currentIndex: number, array: DeltaOperation[]) => DeltaOperation): DeltaOperation; (callbackfn: (previousValue: DeltaOperation, currentValue: DeltaOperation, currentIndex: number, array: DeltaOperation[]) => DeltaOperation, initialValue: De..."}},find:{defaultValue:null,description:"Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",name:"find",required:!0,type:{name:"{ <S extends DeltaOperation>(predicate: (this: void, value: DeltaOperation, index: number, obj: DeltaOperation[]) => value is S, thisArg?: any): S; (predicate: (value: DeltaOperation, index: number, obj: DeltaOperation[]) => unknown, thisArg?: any): DeltaOperation; }"}},findIndex:{defaultValue:null,description:"Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",name:"findIndex",required:!0,type:{name:"(predicate: (value: DeltaOperation, index: number, obj: DeltaOperation[]) => unknown, thisArg?: any) => number"}},fill:{defaultValue:null,description:"Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",name:"fill",required:!0,type:{name:"(value: DeltaOperation, start?: number, end?: number) => DeltaOperation[]"}},copyWithin:{defaultValue:null,description:"Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",name:"copyWithin",required:!0,type:{name:"(target: number, start: number, end?: number) => DeltaOperation[]"}},"__@iterator":{defaultValue:null,description:"Iterator",name:"__@iterator",required:!0,type:{name:"() => IterableIterator<DeltaOperation>"}},entries:{defaultValue:null,description:"Returns an iterable of key, value pairs for every entry in the array",name:"entries",required:!0,type:{name:"() => IterableIterator<[number, DeltaOperation]>"}},keys:{defaultValue:null,description:"Returns an iterable of keys in the array",name:"keys",required:!0,type:{name:"() => IterableIterator<number>"}},values:{defaultValue:null,description:"Returns an iterable of values in the array",name:"values",required:!0,type:{name:"() => IterableIterator<DeltaOperation>"}},"__@unscopables":{defaultValue:null,description:"Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",name:"__@unscopables",required:!0,type:{name:"() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"}},includes:{defaultValue:null,description:"Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",name:"includes",required:!0,type:{name:"(searchElement: DeltaOperation, fromIndex?: number) => boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/quillUtils.ts#getAllImages"]={docgenInfo:getAllImages.__docgenInfo,name:"getAllImages",path:"src/quillUtils.ts#getAllImages"})}catch(__react_docgen_typescript_loader_error){}try{removeTrailingWhitespace.displayName="removeTrailingWhitespace",removeTrailingWhitespace.__docgenInfo={description:"",displayName:"removeTrailingWhitespace",props:{length:{defaultValue:null,description:"Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",name:"length",required:!0,type:{name:"number"}},toString:{defaultValue:null,description:"Returns a string representation of an array.",name:"toString",required:!1,type:{name:"() => string"}},toLocaleString:{defaultValue:null,description:"Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",name:"toLocaleString",required:!1,type:{name:"() => string"}},pop:{defaultValue:null,description:"Removes the last element from an array and returns it.",name:"pop",required:!0,type:{name:"() => DeltaOperation"}},push:{defaultValue:null,description:"Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",name:"push",required:!0,type:{name:"(...items: DeltaOperation[]) => number"}},concat:{defaultValue:null,description:"Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",name:"concat",required:!0,type:{name:"{ (...items: ConcatArray<DeltaOperation>[]): DeltaOperation[]; (...items: (DeltaOperation | ConcatArray<DeltaOperation>)[]): DeltaOperation[]; }"}},join:{defaultValue:null,description:"Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",name:"join",required:!0,type:{name:"(separator?: string) => string"}},reverse:{defaultValue:null,description:"Reverses the elements in an Array.",name:"reverse",required:!0,type:{name:"() => DeltaOperation[]"}},shift:{defaultValue:null,description:"Removes the first element from an array and returns it.",name:"shift",required:!0,type:{name:"() => DeltaOperation"}},slice:{defaultValue:null,description:"Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.",name:"slice",required:!0,type:{name:"(start?: number, end?: number) => DeltaOperation[]"}},sort:{defaultValue:null,description:"Sorts an array.\n@param compareFn Function used to determine the order of the elements. It is expected to return\ra negative value if first argument is less than second argument, zero if they're equal and a positive\rvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r```ts\r[11,2,22,1].sort((a, b) => a - b)\r```",name:"sort",required:!0,type:{name:"(compareFn?: (a: DeltaOperation, b: DeltaOperation) => number) => DeltaOperation[]"}},splice:{defaultValue:null,description:"Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",name:"splice",required:!0,type:{name:"{ (start: number, deleteCount?: number): DeltaOperation[]; (start: number, deleteCount: number, ...items: DeltaOperation[]): DeltaOperation[]; }"}},unshift:{defaultValue:null,description:"Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",name:"unshift",required:!0,type:{name:"(...items: DeltaOperation[]) => number"}},indexOf:{defaultValue:null,description:"Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",name:"indexOf",required:!0,type:{name:"(searchElement: DeltaOperation, fromIndex?: number) => number"}},lastIndexOf:{defaultValue:null,description:"Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",name:"lastIndexOf",required:!0,type:{name:"(searchElement: DeltaOperation, fromIndex?: number) => number"}},every:{defaultValue:null,description:"Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",name:"every",required:!0,type:{name:"(callbackfn: (value: DeltaOperation, index: number, array: DeltaOperation[]) => unknown, thisArg?: any) => boolean"}},some:{defaultValue:null,description:"Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",name:"some",required:!0,type:{name:"(callbackfn: (value: DeltaOperation, index: number, array: DeltaOperation[]) => unknown, thisArg?: any) => boolean"}},forEach:{defaultValue:null,description:"Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"forEach",required:!0,type:{name:"(callbackfn: (value: DeltaOperation, index: number, array: DeltaOperation[]) => void, thisArg?: any) => void"}},map:{defaultValue:null,description:"Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"map",required:!0,type:{name:"<U>(callbackfn: (value: DeltaOperation, index: number, array: DeltaOperation[]) => U, thisArg?: any) => U[]"}},filter:{defaultValue:null,description:"Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"filter",required:!0,type:{name:"{ <S extends DeltaOperation>(callbackfn: (value: DeltaOperation, index: number, array: DeltaOperation[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: DeltaOperation, index: number, array: DeltaOperation[]) => unknown, thisArg?: any): DeltaOperation[]; }"}},reduce:{defaultValue:null,description:"Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",name:"reduce",required:!0,type:{name:"{ (callbackfn: (previousValue: DeltaOperation, currentValue: DeltaOperation, currentIndex: number, array: DeltaOperation[]) => DeltaOperation): DeltaOperation; (callbackfn: (previousValue: DeltaOperation, currentValue: DeltaOperation, currentIndex: number, array: DeltaOperation[]) => DeltaOperation, initialValue: De..."}},reduceRight:{defaultValue:null,description:"Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",name:"reduceRight",required:!0,type:{name:"{ (callbackfn: (previousValue: DeltaOperation, currentValue: DeltaOperation, currentIndex: number, array: DeltaOperation[]) => DeltaOperation): DeltaOperation; (callbackfn: (previousValue: DeltaOperation, currentValue: DeltaOperation, currentIndex: number, array: DeltaOperation[]) => DeltaOperation, initialValue: De..."}},find:{defaultValue:null,description:"Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",name:"find",required:!0,type:{name:"{ <S extends DeltaOperation>(predicate: (this: void, value: DeltaOperation, index: number, obj: DeltaOperation[]) => value is S, thisArg?: any): S; (predicate: (value: DeltaOperation, index: number, obj: DeltaOperation[]) => unknown, thisArg?: any): DeltaOperation; }"}},findIndex:{defaultValue:null,description:"Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",name:"findIndex",required:!0,type:{name:"(predicate: (value: DeltaOperation, index: number, obj: DeltaOperation[]) => unknown, thisArg?: any) => number"}},fill:{defaultValue:null,description:"Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",name:"fill",required:!0,type:{name:"(value: DeltaOperation, start?: number, end?: number) => DeltaOperation[]"}},copyWithin:{defaultValue:null,description:"Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",name:"copyWithin",required:!0,type:{name:"(target: number, start: number, end?: number) => DeltaOperation[]"}},"__@iterator":{defaultValue:null,description:"Iterator",name:"__@iterator",required:!0,type:{name:"() => IterableIterator<DeltaOperation>"}},entries:{defaultValue:null,description:"Returns an iterable of key, value pairs for every entry in the array",name:"entries",required:!0,type:{name:"() => IterableIterator<[number, DeltaOperation]>"}},keys:{defaultValue:null,description:"Returns an iterable of keys in the array",name:"keys",required:!0,type:{name:"() => IterableIterator<number>"}},values:{defaultValue:null,description:"Returns an iterable of values in the array",name:"values",required:!0,type:{name:"() => IterableIterator<DeltaOperation>"}},"__@unscopables":{defaultValue:null,description:"Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",name:"__@unscopables",required:!0,type:{name:"() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"}},includes:{defaultValue:null,description:"Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",name:"includes",required:!0,type:{name:"(searchElement: DeltaOperation, fromIndex?: number) => boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/quillUtils.ts#removeTrailingWhitespace"]={docgenInfo:removeTrailingWhitespace.__docgenInfo,name:"removeTrailingWhitespace",path:"src/quillUtils.ts#removeTrailingWhitespace"})}catch(__react_docgen_typescript_loader_error){}function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?_assertThisInitialized(self):call}function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var TenorKeyboard=__webpack_require__(767).default,Tooltip_GifImage=function GifImage(props){return react_default.a.createElement("svg",props,react_default.a.createElement("path",{className:"ql-fill",d:"M8 5h2v8H8zM0 7h2v4H0zM12 7h2v6h-2zM0 7a2 2 0 0 1 2-2h4v2H0zM12 5h6v2h-6z"}),react_default.a.createElement("path",{className:"ql-fill",d:"M12 9h5v2h-5zM0 11h6a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zM4 9h2v2H4z"}))};Tooltip_GifImage.defaultProps={xmlns:"http://www.w3.org/2000/svg",width:"18",height:"18",viewBox:"0 0 18 18"};var Tooltip_YouTubeIcon=function YouTubeIcon(props){return react_default.a.createElement("svg",props,react_default.a.createElement("path",{className:"ql-fill",d:"M180.3 53.4c-2-7.6-8-13.6-15.6-15.7C151 34 96 34 96 34s-55 0-68.8 3.7c-7.6 2-13.5 8-15.6 15.7C8 67.2 8 96 8 96s0 28.8 3.7 42.6c2 7.6 8 13.6 15.6 15.7C41 158 96 158 96 158s55 0 68.8-3.7c7.6-2 13.5-8 15.6-15.7C184 124.8 184 96 184 96s0-28.8-3.7-42.6zM78 122.2V69.8L124 96l-46 26.2z"}))};Tooltip_YouTubeIcon.defaultProps={xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 192 192"};var Tooltip_TumblrIcon=function TumblrIcon(props){return react_default.a.createElement("svg",props,react_default.a.createElement("path",{className:"ql-fill",d:"M98.2 159.3c-24 0-41.8-12.3-41.8-41.8V70.3H34.6V44.7c24-6.2 34-26.8 35.1-44.7h24.9v40.5h29v29.7h-29v41.1c0 12.3 6.2 16.6 16.1 16.6h14.1v31.3H98.2v.1z"}))};Tooltip_TumblrIcon.defaultProps={xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 180 180"};var Tooltip_TiktokIcon=function TiktokIcon(props){return react_default.a.createElement("svg",props,react_default.a.createElement("path",{className:"ql-fill",d:"M2081 0c55 473 319 755 778 785v532c-266 26-499-61-770-225v995c0 1264-1378 1659-1932 753-356-583-138-1606 1004-1647v561c-87 14-180 36-265 65-254 86-398 247-358 531 77 544 1075 705 992-358V1h551z"}))};Tooltip_TiktokIcon.defaultProps={xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 2859 3333",shapeRendering:"geometricPrecision",textRendering:"geometricPrecision",imageRendering:"optimizeQuality",fillRule:"evenodd",clipRule:"evenodd"};var Tooltip_TwitterIcon=function TwitterIcon(props){return react_default.a.createElement("svg",props,react_default.a.createElement("path",{d:"M91.1 239c94.4 0 146-78 146-145.8 0-2.3 0-4.5-.2-6.7 10-7.2 18.7-16.2 25.6-26.5-9.4 4.1-19.3 6.8-29.5 8a51.5 51.5 0 0 0 22.6-28.3c-10 6-21 10.2-32.6 12.4A51.3 51.3 0 0 0 135.6 99C94.4 96.9 56 77.4 30 45.3a51.3 51.3 0 0 0 15.9 68.5 51 51 0 0 1-23.3-6.4v.6a51.3 51.3 0 0 0 41.1 50.3c-7.5 2-15.4 2.4-23.1.9a51.3 51.3 0 0 0 48 35.6 103 103 0 0 1-76 21.3c23.5 15 50.7 23 78.6 23",className:"ql-fill"}))};Tooltip_TwitterIcon.defaultProps={viewBox:"0 0 275 275",xmlns:"http://www.w3.org/2000/svg"};var Tooltip_RedditIcon=function RedditIcon(props){return react_default.a.createElement("svg",props,react_default.a.createElement("path",{className:"ql-fill",d:"M46.3 1.3c-24.9 0-45 20.1-45 45s20.1 45 45 45 45-20.1 45-45c0-24.8-20.1-45-45-45zm26.1 51c.1.7.2 1.4.2 2 0 10.1-11.8 18.4-26.3 18.4s-26.2-8.2-26.2-18.3c0-.7.1-1.4.2-2-2.3-1.1-3.9-3.3-3.9-6 0-3.5 2.9-6.5 6.5-6.5 1.8 0 3.4.7 4.6 1.8 4.5-3.3 10.8-5.4 17.8-5.6l3.4-15.7c.1-.4.2-.6.5-.8.3-.2.6-.3.9-.2L61 21.7c.8-1.5 2.4-2.6 4.2-2.6 2.6 0 4.7 2.1 4.7 4.7s-2.1 4.7-4.7 4.7-4.6-2-4.7-4.5l-9.8-2.1-3 14.1c6.8.3 13 2.4 17.5 5.6 1.2-1.1 2.8-1.8 4.6-1.8 3.6 0 6.5 2.9 6.5 6.5 0 2.7-1.6 5-3.9 6z"}))};Tooltip_RedditIcon.defaultProps={xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 93.2 92.6"};var Tooltip_PixivIcon=function PixivIcon(props){return react_default.a.createElement("svg",props,react_default.a.createElement("path",{className:"ql-fill",d:"M162.612 26.723c-42.567.793-93.967 20.35-150.875 69.78l15.156 32.845 8.25-4.782V107.63c4.895-9.83 11.734-18.87 25.156-25.188v189.407H53.33l.063 6.75h47.25v-6.563h-7.094v-47.75c263.738 59.097 228.292-200.528 69.063-197.562zm-1.97 18.25c127.518.894 130.47 225.42-67.093 158.093V62.16c25.1-12.206 47.564-17.324 67.094-17.187z"}))};Tooltip_PixivIcon.defaultProps={xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 300 300"};var Tooltip_InstagramIcon=function InstagramIcon(props){return react_default.a.createElement("svg",props,react_default.a.createElement("path",{fill:"none",d:"M-.2.1h53.8v53.4H-.2z"}),react_default.a.createElement("path",{className:"ql-fill",d:"M48.1 26.3c0 4.3 0 7.2-.1 8.8-.2 3.9-1.3 6.9-3.5 9s-5.1 3.3-9 3.5c-1.6.1-4.6.1-8.8.1-4.3 0-7.2 0-8.8-.1-3.9-.2-6.9-1.3-9-3.5-2.1-2.1-3.3-5.1-3.5-9-.1-1.6-.1-4.6-.1-8.8s0-7.2.1-8.8c.2-3.9 1.3-6.9 3.5-9C11 6.4 14 5.2 17.9 5c1.6-.1 4.6-.1 8.8-.1 4.3 0 7.2 0 8.8.1 3.9.2 6.9 1.3 9 3.5s3.3 5.1 3.5 9c0 1.6.1 4.5.1 8.8zM28.8 8.7h-7.1c-.7 0-1.6 0-2.7.1-1.1 0-2.1.1-2.9.3-.8.1-1.5.3-2 .5-.9.4-1.7.9-2.5 1.6-.7.7-1.2 1.5-1.6 2.5-.2.5-.4 1.2-.5 2s-.2 1.7-.3 2.9c0 1.1-.1 2-.1 2.7v10c0 .7 0 1.6.1 2.7 0 1.1.1 2.1.3 2.9s.3 1.5.5 2c.4.9.9 1.7 1.6 2.5.7.7 1.5 1.2 2.5 1.6.5.2 1.2.4 2 .5.8.1 1.7.2 2.9.3s2 .1 2.7.1h10c.7 0 1.6 0 2.7-.1 1.1 0 2.1-.1 2.9-.3.8-.1 1.5-.3 2-.5.9-.4 1.7-.9 2.5-1.6.7-.7 1.2-1.5 1.6-2.5.2-.5.4-1.2.5-2 .1-.8.2-1.7.3-2.9 0-1.1.1-2 .1-2.7v-2.9-2.1-2.1-2.9c0-.7 0-1.6-.1-2.7 0-1.1-.1-2.1-.3-2.9-.1-.8-.3-1.5-.5-2-.4-.9-.9-1.7-1.6-2.5-.7-.7-1.5-1.2-2.5-1.6-.5-.2-1.2-.4-2-.5-.8-.1-1.7-.2-2.9-.3-1.1 0-2-.1-2.7-.1h-2.9zm5.6 9.8c2.1 2.1 3.2 4.7 3.2 7.8s-1.1 5.6-3.2 7.8c-2.1 2.1-4.7 3.2-7.8 3.2-3.1 0-5.6-1.1-7.8-3.2-2.1-2.1-3.2-4.7-3.2-7.8s1.1-5.6 3.2-7.8c2.1-2.1 4.7-3.2 7.8-3.2 3.1 0 5.7 1 7.8 3.2zm-2.7 12.8c1.4-1.4 2.1-3.1 2.1-5s-.7-3.7-2.1-5.1c-1.4-1.4-3.1-2.1-5.1-2.1-2 0-3.7.7-5.1 2.1s-2.1 3.1-2.1 5.1.7 3.7 2.1 5c1.4 1.4 3.1 2.1 5.1 2.1 2 0 3.7-.7 5.1-2.1zM39.9 13c.5.5.8 1.1.8 1.8s-.3 1.3-.8 1.8-1.1.8-1.8.8-1.3-.3-1.8-.8-.8-1.1-.8-1.8.3-1.3.8-1.8 1.1-.8 1.8-.8 1.3.3 1.8.8z"}))};Tooltip_InstagramIcon.defaultProps={xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 54 54"};var Tooltip_QuillModule,Tooltip_VimeoIcon=function VimeoIcon(props){return react_default.a.createElement("svg",props,react_default.a.createElement("path",{className:"ql-fill",d:"M24 0C10.7 0 0 10.7 0 24s10.7 24 24 24 24-10.7 24-24S37.3 0 24 0zm7 28c-3.2 4.2-6 6.3-8.2 6.3-1.4 0-2.6-1.3-3.5-3.8-.6-2.3-1.3-4.7-1.9-7-.7-2.6-1.5-3.8-2.3-3.8-.2 0-.8.4-1.9 1.1l-1.1-1.4c1.2-1 2.3-2.1 3.5-3.1 1.6-1.4 2.7-2.1 3.5-2.1 1.8-.2 3 1.1 3.4 3.8.5 2.9.8 4.7 1 5.4.5 2.4 1.1 3.6 1.8 3.6.5 0 1.2-.8 2.2-2.3 1-1.6 1.5-2.8 1.6-3.6.1-1.3-.4-2-1.6-2-.6 0-1.2.1-1.8.4 1.2-3.8 3.4-5.6 6.7-5.5 2.5-.2 3.6 1.4 3.5 4.5-.1 2.3-1.8 5.5-4.9 9.5z"}))};Tooltip_VimeoIcon.defaultProps={xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 48 48"},"undefined"!=typeof window&&(Tooltip_QuillModule=__webpack_require__(13));var Tooltip_Tooltip=function(_Component){!function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(Tooltip,_Component);var _super=_createSuper(Tooltip);function Tooltip(){var _this;_classCallCheck(this,Tooltip);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _defineProperty(_assertThisInitialized(_this=_super.call.apply(_super,[this].concat(args))),"state",{tenorOpen:!1}),_defineProperty(_assertThisInitialized(_this),"gifButton",react_default.a.createRef()),_defineProperty(_assertThisInitialized(_this),"imageInput",react_default.a.createRef()),_this}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}(Tooltip,[{key:"render",value:function render(){var _this2=this;return react_default.a.createElement(react_default.a.Fragment,null,react_default.a.createElement("div",{className:"jsx-1576276492 ql-bubble"},react_default.a.createElement("div",{style:{top:"".concat(this.props.top,"px"),right:"".concat(this.props.right,"px")},className:"jsx-1576276492 "+(classnames_default()("tooltip ql-tooltip ql-toolbar",{hidden:!this.props.show})||"")},react_default.a.createElement("button",{onClick:function onClick(){var _this2$imageInput$cur;null===(_this2$imageInput$cur=_this2.imageInput.current)||void 0===_this2$imageInput$cur||_this2$imageInput$cur.click()},dangerouslySetInnerHTML:{__html:Tooltip_QuillModule.import("ui/icons").image},className:"jsx-1576276492 ql-image"}),react_default.a.createElement(ImageLoader,{ref:this.imageInput,onImageLoaded:function onImageLoaded(image){_this2.props.onInsertEmbed({type:"block-image",embed:image})}}),react_default.a.createElement("button",{ref:this.gifButton,onClick:function onClick(e){_this2.props.preventUpdate(!0),e.stopPropagation(),_this2.setState({tenorOpen:!0})},className:"jsx-1576276492 ql-image-gif ql-image"},react_default.a.createElement(Tooltip_GifImage,{key:"gif_image"})),react_default.a.createElement("button",{onClick:function onClick(){var url=prompt("Gimme a tweet url");url&&_this2.props.onInsertEmbed({type:"tweet",embed:url})},className:"jsx-1576276492 ql-tweet"},react_default.a.createElement(Tooltip_TwitterIcon,{key:"twitter"})),react_default.a.createElement("button",{onClick:function onClick(){var url=prompt("Gimme a reddit url");url&&_this2.props.onInsertEmbed({type:"reddit-embed",embed:{url:url}})},className:"jsx-1576276492 ql-reddit"},react_default.a.createElement(Tooltip_RedditIcon,{key:"reddit"})),react_default.a.createElement("button",{onClick:function onClick(){var url=prompt("Gimme a pixiv url");url&&_this2.props.onInsertEmbed({type:"pixiv-embed",embed:{url:url}})},className:"jsx-1576276492 ql-pixiv"},react_default.a.createElement(Tooltip_PixivIcon,{key:"pixiv"})),react_default.a.createElement("button",{onClick:function onClick(){var url=prompt("Gimme a instagram url");url&&_this2.props.onInsertEmbed({type:"instagram-embed",embed:{url:url}})},className:"jsx-1576276492 ql-instagram"},react_default.a.createElement(Tooltip_InstagramIcon,{key:"instagram"})),react_default.a.createElement("button",{onClick:function onClick(){var url=prompt("Gimme a tumblr url");url&&_this2.props.onInsertEmbed({type:"tumblr-embed",embed:url})},className:"jsx-1576276492 ql-tumblr"},react_default.a.createElement(Tooltip_TumblrIcon,{key:"tumblr_icon"})),react_default.a.createElement("button",{onClick:function onClick(){var url=prompt("Gimme a TikTok url");url&&_this2.props.onInsertEmbed({type:"tiktok-embed",embed:url})},className:"jsx-1576276492 ql-tiktok"},react_default.a.createElement(Tooltip_TiktokIcon,{key:"tiktok_icon"})),react_default.a.createElement("button",{onClick:function onClick(){var url=prompt("Gimme a YouTube url");url&&_this2.props.onInsertEmbed({type:"youtube-video",embed:url})},className:"jsx-1576276492 ql-youtube"},react_default.a.createElement(Tooltip_YouTubeIcon,{key:"youtube_icon"})),react_default.a.createElement("button",{onClick:function onClick(){var url=prompt("Gimme a vimeo url");url&&_this2.props.onInsertEmbed({type:"vimeo-embed",embed:{url:url}})},className:"jsx-1576276492 ql-vimeo"},react_default.a.createElement(Tooltip_VimeoIcon,{key:"vimeo"})),react_default.a.createElement(TenorKeyboard,{isOpen:this.state.tenorOpen,target:this.gifButton,onClose:function onClose(result){_this2.props.preventUpdate(!1),result&&_this2.props.onInsertEmbed({type:"block-image",embed:result.media[0].gif.url}),_this2.setState({tenorOpen:!1})}}))),react_default.a.createElement(style_default.a,{id:"1576276492"},[".tooltip.jsx-1576276492{position:absolute;z-index:5;height:25px;padding:0 5px;display:block;-webkit-transform:translateY(-5px);-ms-transform:translateY(-5px);transform:translateY(-5px);}",".tooltip.hidden.jsx-1576276492{display:none;}",".ql-tumblr{padding:4px 7px;margin-top:1px;}"]))}}]),Tooltip}(react.Component),ImageLoader=Object(react.forwardRef)((function(props,ref){return react_default.a.createElement("input",{ref:ref,className:"ql-image",type:"file",accept:"image/png, image/gif, image/jpeg, image/bmp, image/x-icon",onChange:function onChange(e){var fileInput=e.target;if(null!=fileInput.files&&null!=fileInput.files[0]){var reader=new FileReader;reader.onload=function(e){var _e$target;(null===(_e$target=e.target)||void 0===_e$target?void 0:_e$target.result)&&(props.onImageLoaded(e.target.result),fileInput.value="")},reader.readAsDataURL(fileInput.files[0])}}})})),src_Tooltip=Tooltip_Tooltip;try{Tooltip_Tooltip.displayName="Tooltip",Tooltip_Tooltip.__docgenInfo={description:"",displayName:"Tooltip",props:{show:{defaultValue:null,description:"",name:"show",required:!0,type:{name:"boolean"}},top:{defaultValue:null,description:"",name:"top",required:!0,type:{name:"number"}},right:{defaultValue:null,description:"",name:"right",required:!0,type:{name:"number"}},onInsertEmbed:{defaultValue:null,description:"",name:"onInsertEmbed",required:!0,type:{name:"({}: { type: string; embed: any; }) => void"}},preventUpdate:{defaultValue:null,description:"",name:"preventUpdate",required:!0,type:{name:"(shouldPrevent: boolean) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Tooltip.tsx#Tooltip"]={docgenInfo:Tooltip_Tooltip.__docgenInfo,name:"Tooltip",path:"src/Tooltip.tsx#Tooltip"})}catch(__react_docgen_typescript_loader_error){}try{Tooltip_Tooltip.displayName="Tooltip",Tooltip_Tooltip.__docgenInfo={description:"",displayName:"Tooltip",props:{show:{defaultValue:null,description:"",name:"show",required:!0,type:{name:"boolean"}},top:{defaultValue:null,description:"",name:"top",required:!0,type:{name:"number | undefined"}},right:{defaultValue:null,description:"",name:"right",required:!0,type:{name:"number | undefined"}},onInsertEmbed:{defaultValue:null,description:"",name:"onInsertEmbed",required:!0,type:{name:"({}: { type: string; embed: any; }) => void"}},preventUpdate:{defaultValue:null,description:"",name:"preventUpdate",required:!0,type:{name:"(shouldPrevent: boolean) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Tooltip.tsx#Tooltip"]={docgenInfo:Tooltip_Tooltip.__docgenInfo,name:"Tooltip",path:"src/Tooltip.tsx#Tooltip"})}catch(__react_docgen_typescript_loader_error){}var color="#ff5252",Spinner_Spinner=function Spinner(props){var width=props.width||40,margin=props.margin||width/10;return react_default.a.createElement(react_default.a.Fragment,null,react_default.a.createElement("div",{className:style_default.a.dynamic([["2779316791",[width,width,width-2*margin,width-2*margin,margin,margin,color,color]]])+" lds-ring"},react_default.a.createElement("div",{className:style_default.a.dynamic([["2779316791",[width,width,width-2*margin,width-2*margin,margin,margin,color,color]]])}),react_default.a.createElement("div",{className:style_default.a.dynamic([["2779316791",[width,width,width-2*margin,width-2*margin,margin,margin,color,color]]])}),react_default.a.createElement("div",{className:style_default.a.dynamic([["2779316791",[width,width,width-2*margin,width-2*margin,margin,margin,color,color]]])}),react_default.a.createElement("div",{className:style_default.a.dynamic([["2779316791",[width,width,width-2*margin,width-2*margin,margin,margin,color,color]]])})),react_default.a.createElement(style_default.a,{id:"2779316791",dynamic:[width,width,width-2*margin,width-2*margin,margin,margin,color,color]},[".lds-ring.__jsx-style-dynamic-selector{display:inline-block;position:relative;width:".concat(width,"px;height:").concat(width,"px;opacity:0.5;}"),".lds-ring.__jsx-style-dynamic-selector div.__jsx-style-dynamic-selector{box-sizing:border-box;display:block;position:absolute;width:".concat(width-2*margin,"px;height:").concat(width-2*margin,"px;margin:").concat(margin,"px;border:").concat(margin,"px solid ").concat(color,";border-radius:50%;-webkit-animation:lds-ring-__jsx-style-dynamic-selector 1.2s cubic-bezier(0.5,0,0.5,1) infinite;animation:lds-ring-__jsx-style-dynamic-selector 1.2s cubic-bezier(0.5,0,0.5,1) infinite;border-color:").concat(color," transparent transparent transparent;}"),".lds-ring.__jsx-style-dynamic-selector div.__jsx-style-dynamic-selector:nth-child(1){-webkit-animation-delay:-0.45s;animation-delay:-0.45s;}",".lds-ring.__jsx-style-dynamic-selector div.__jsx-style-dynamic-selector:nth-child(2){-webkit-animation-delay:-0.3s;animation-delay:-0.3s;}",".lds-ring.__jsx-style-dynamic-selector div.__jsx-style-dynamic-selector:nth-child(3){-webkit-animation-delay:-0.15s;animation-delay:-0.15s;}","@-webkit-keyframes lds-ring-__jsx-style-dynamic-selector{0%{-webkit-transform:rotate(0deg);-ms-transform:rotate(0deg);transform:rotate(0deg);}100%{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}","@keyframes lds-ring-__jsx-style-dynamic-selector{0%{-webkit-transform:rotate(0deg);-ms-transform:rotate(0deg);transform:rotate(0deg);}100%{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}"]))},src_Spinner=Spinner_Spinner;try{Spinner_Spinner.displayName="Spinner",Spinner_Spinner.__docgenInfo={description:"",displayName:"Spinner",props:{width:{defaultValue:null,description:"",name:"width",required:!1,type:{name:"number"}},margin:{defaultValue:null,description:"",name:"margin",required:!1,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Spinner.tsx#Spinner"]={docgenInfo:Spinner_Spinner.__docgenInfo,name:"Spinner",path:"src/Spinner.tsx#Spinner"})}catch(__react_docgen_typescript_loader_error){}var CustomNodesStyle=__webpack_require__(124);__webpack_require__(778),__webpack_require__(780);function Editor_typeof(obj){return(Editor_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function Editor_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function Editor_defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function Editor_setPrototypeOf(o,p){return(Editor_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function Editor_createSuper(Derived){var hasNativeReflectConstruct=function Editor_isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=Editor_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=Editor_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return Editor_possibleConstructorReturn(this,result)}}function Editor_possibleConstructorReturn(self,call){return!call||"object"!==Editor_typeof(call)&&"function"!=typeof call?Editor_assertThisInitialized(self):call}function Editor_assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}function Editor_getPrototypeOf(o){return(Editor_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function Editor_defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var Editor_QuillModule,Editor_logging=__webpack_require__(30)("bobapost:editor"),loggingVerbose=__webpack_require__(30)("bobapost:editor:verbose"),Editor_SpoilersIcon=function SpoilersIcon(props){return react_default.a.createElement("svg",props,react_default.a.createElement("path",{className:"ql-fill",d:"M11.885 14.988l3.104-3.098L15 12c0 1.654-1.346 3-3 3l-.115-.012zm8.048-8.032l-3.274 3.268c.212.554.341 1.149.341 1.776 0 2.757-2.243 5-5 5-.631 0-1.229-.13-1.785-.344l-2.377 2.372c1.276.588 2.671.972 4.177.972C19.748 20 24 11.551 24 11.551s-1.415-2.478-4.067-4.595zm1.431-3.536L2.745 22l-1.382-1.422 3.455-3.447C1.796 14.681 0 11.551 0 11.551S4.446 4 12.015 4c1.825 0 3.456.426 4.886 1.075L19.982 2l1.382 1.42zM7.613 14.342l1.519-1.515A2.938 2.938 0 0 1 9 12c0-1.654 1.346-3 3-3 .291 0 .567.055.833.134l1.518-1.515A4.906 4.906 0 0 0 12 7c-2.757 0-5 2.243-5 5 0 .852.235 1.641.613 2.342z"}))};if(Editor_SpoilersIcon.defaultProps={xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24"},"undefined"!=typeof window){Editor_QuillModule=__webpack_require__(13);var MagicUrl=__webpack_require__(782);Editor_QuillModule.register("modules/magicUrl",MagicUrl.default);var InlineSpoilers=__webpack_require__(162);Editor_QuillModule.register("formats/inline-spoilers",InlineSpoilers.default);var icons=Editor_QuillModule.import("ui/icons");icons["inline-spoilers"]=Object(server_browser.renderToStaticMarkup)(react_default.a.createElement(Editor_SpoilersIcon,null)),Editor_logging(icons["inline-spoilers"])}var Editor_Editor=function(_Component){!function Editor_inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&Editor_setPrototypeOf(subClass,superClass)}(Editor,_Component);var _super=Editor_createSuper(Editor);function Editor(){var _this;Editor_classCallCheck(this,Editor);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return Editor_defineProperty(Editor_assertThisInitialized(_this=_super.call.apply(_super,[this].concat(args))),"state",{charactersTyped:1,showTooltip:!1,loaded:!1,tooltipPostion:{top:0,right:0}}),Editor_defineProperty(Editor_assertThisInitialized(_this),"editor",null),Editor_defineProperty(Editor_assertThisInitialized(_this),"editorContainer",Object(react.createRef)()),Editor_defineProperty(Editor_assertThisInitialized(_this),"tooltip",Object(react.createRef)()),Editor_defineProperty(Editor_assertThisInitialized(_this),"toolbarContainer",Object(react.createRef)()),Editor_defineProperty(Editor_assertThisInitialized(_this),"skipTooltipUpdates",!1),Editor_defineProperty(Editor_assertThisInitialized(_this),"eventHandlers",[]),Editor_defineProperty(Editor_assertThisInitialized(_this),"removeLineBreaksHandler",null),Editor_defineProperty(Editor_assertThisInitialized(_this),"imagePasteHandler",null),_this}return function Editor_createClass(Constructor,protoProps,staticProps){return protoProps&&Editor_defineProperties(Constructor.prototype,protoProps),staticProps&&Editor_defineProperties(Constructor,staticProps),Constructor}(Editor,[{key:"addCharactersTypedHandler",value:function addCharactersTypedHandler(){var _this2=this,typingHandler=this.editor.on("text-change",(function(delta){var currentCharacters=_this2.editor.getLength(),stateCharacters=_this2.state.charactersTyped;Editor_logging("Text changed: ".concat(currentCharacters,"(current) ").concat(stateCharacters,"(previous)")),_this2.setState({charactersTyped:currentCharacters},(function(){_this2.props.onIsEmptyChange&&(1==stateCharacters&&currentCharacters>1?(loggingVerbose("Marking not empty"),_this2.props.onIsEmptyChange(!1)):stateCharacters>1&&1==currentCharacters&&(loggingVerbose("Marking empty"),_this2.props.onIsEmptyChange(!0))),_this2.props.onCharactersChange&&stateCharacters!=currentCharacters&&(loggingVerbose("Updating character count"),_this2.props.onCharactersChange(currentCharacters))}))}));this.eventHandlers.push({type:"text-change",handler:typingHandler})}},{key:"addTextChangeHandler",value:function addTextChangeHandler(){var _this3=this,changeHandler=this.editor.on("text-change",(function(diff,old,source){loggingVerbose("Text change from ".concat(source,"!")),loggingVerbose(_this3.editor.getContents()),_this3.props.onTextChange(_this3.editor.getContents())}));this.eventHandlers.push({type:"text-change",handler:changeHandler})}},{key:"addEmptyLineTooltipHandler",value:function addEmptyLineTooltipHandler(){var _this4=this,newLineHandler=this.editor.on("editor-change",(function(eventName){if("selection-change"===eventName){if(!_this4.props.editable)return;var bounds=detectNewLine(_this4.editor);_this4.maybeShowEmptyLineTooltip(bounds),_this4.props.onTextChange(_this4.editor.getContents())}}));this.eventHandlers.push({type:"editor-change",handler:newLineHandler})}},{key:"addCustomEmbeds",value:function addCustomEmbeds(){var _this5=this,embedsLoadedCallback=function embedsLoadedCallback(){_this5.skipTooltipUpdates=!1;var bounds=detectNewLine(_this5.editor);Editor_logging("Embeds callback activated! New line bounds:"),Editor_logging(bounds),_this5.maybeShowEmptyLineTooltip(bounds),_this5.props.editable&&_this5.props.onTextChange(_this5.editor.getContents()),_this5.props.onEmbedLoaded&&_this5.props.onEmbedLoaded()},embedCloseCallback=function embedCloseCallback(root){if(Editor_logging("deleting embed"),_this5.props.editable){var _QuillModule$find;null===(_QuillModule$find=Editor_QuillModule.find(root,!0))||void 0===_QuillModule$find||_QuillModule$find.remove(),_this5.props.onTextChange(_this5.editor.getContents()),_this5.skipTooltipUpdates=!1;var bounds=detectNewLine(_this5.editor);_this5.maybeShowEmptyLineTooltip(bounds)}};__webpack_require__(783).keys().map((function(path){return path.substring(2)})).forEach((function(moduleName){!function importEmbedModule(moduleName,callbacks){logging("Importing module ".concat(moduleName));var EmbedModule=__webpack_require__(747)("./".concat(moduleName)).default;QuillModule.register("formats/".concat(EmbedModule.blotName),EmbedModule,!0),QuillModule.import("formats/".concat(EmbedModule.blotName)).setOnLoadCallback(callbacks.onLoadCallback),QuillModule.import("formats/".concat(EmbedModule.blotName)).onRemoveRequest=callbacks.onRemoveRequestCallback}(moduleName,{onLoadCallback:embedsLoadedCallback,onRemoveRequestCallback:embedCloseCallback})}))}},{key:"addRemoveLinebreaksOnPasteHandler",value:function addRemoveLinebreaksOnPasteHandler(){var _this$editorContainer;this.removeLineBreaksHandler=null===(_this$editorContainer=this.editorContainer.current)||void 0===_this$editorContainer?void 0:_this$editorContainer.addEventListener("paste",removeLineBreaksFromPaste,!0)}},{key:"addImagesPasteHandler",value:function addImagesPasteHandler(){var _this$editorContainer2,_this6=this;null===(_this$editorContainer2=this.editorContainer.current)||void 0===_this$editorContainer2||_this$editorContainer2.addEventListener("paste",(function(e){!function pasteImageAsBlockEmbed(pasteEvent,embedMethod){var _pasteEvent$clipboard2,_pasteEvent$clipboard3;logging("Paste event detected! Processing images...");var found=!1;logging(null===(_pasteEvent$clipboard2=pasteEvent.clipboardData)||void 0===_pasteEvent$clipboard2||null===(_pasteEvent$clipboard3=_pasteEvent$clipboard2.items)||void 0===_pasteEvent$clipboard3?void 0:_pasteEvent$clipboard3.length);for(var i=0;i<((null===(_pasteEvent$clipboard4=pasteEvent.clipboardData)||void 0===_pasteEvent$clipboard4||null===(_pasteEvent$clipboard5=_pasteEvent$clipboard4.items)||void 0===_pasteEvent$clipboard5?void 0:_pasteEvent$clipboard5.length)||-1);i++){var _pasteEvent$clipboard4,_pasteEvent$clipboard5,_pasteEvent$clipboard6,item=null===(_pasteEvent$clipboard6=pasteEvent.clipboardData)||void 0===_pasteEvent$clipboard6?void 0:_pasteEvent$clipboard6.items[i];if(item.type.startsWith("image/")){found=!0,logging(item.kind),logging(item.getAsFile());var reader=new FileReader;reader.onload=function(e){var _e$target;(null===(_e$target=e.target)||void 0===_e$target?void 0:_e$target.result)&&embedMethod(e.target.result)};var file=item.getAsFile();file&&reader.readAsDataURL(file)}}found&&(pasteEvent.preventDefault(),pasteEvent.stopPropagation())}(e,(function(img){_this6.addEmbed("block-image",img)}))}),!0)}},{key:"addEmbed",value:function addEmbed(type,embed){var _this7=this;this.editor.focus(),this.setState({showTooltip:!1}),this.skipTooltipUpdates=!0;var range=this.editor.getSelection(!0);this.editor.insertEmbed(range.index,type,embed,"user");for(var nextRange=range.index+1;"string"!=typeof this.editor.getContents(nextRange,1).ops[0].insert;)nextRange++;this.editor.setSelection(nextRange,"silent"),requestAnimationFrame((function(){return _this7.editor.focus()}))}},{key:"maybeShowEmptyLineTooltip",value:function maybeShowEmptyLineTooltip(bounds){this.skipTooltipUpdates||(null!=bounds?(Editor_logging("Showing tooltip"),this.setState({showTooltip:!0,tooltipPostion:{top:bounds.top,right:bounds.right}})):this.setState({showTooltip:!1}))}},{key:"shouldComponentUpdate",value:function shouldComponentUpdate(newProps,newState){loggingVerbose("New State:"),loggingVerbose(newState),loggingVerbose("Should I update?");var update=!1;return update=(update=(update=(update=(update=update||newProps.editable!=this.props.editable)||newState.showTooltip!=this.state.showTooltip)||newState.tooltipPostion!=this.state.tooltipPostion)||newState.loaded!=this.state.loaded)||newProps.focus!=this.props.focus,loggingVerbose(update?"...yes.":"...no."),update}},{key:"componentDidUpdate",value:function componentDidUpdate(prevProps){this.editor.enable(this.props.editable),this.props.editable||this.setState({showTooltip:!1}),this.props.focus&&!prevProps.focus&&this.editor.focus()}},{key:"componentDidMount",value:function componentDidMount(){var _this$props$onEditorC,_this$props,_this8=this;this.addCustomEmbeds(),Editor_logging("Installing Quill Editor");var quillConfig={modules:{toolbar:{container:this.toolbarContainer.current},clipboard:{matchVisual:!1},magicUrl:{urlRegularExpression:/(https?:\/\/[\S]+)|(www\.[\S]+)|(mailto:[\S]+)|(tel:[\S]+)/},keyboard:{bindings:{}}},theme:"bubble"};!function withKeyboardSubmitHandler(quillKeyboardConfig,handler){var Keyboard=QuillModule.import("modules/keyboard");quillKeyboardConfig.bindings.submit={key:Keyboard.keys.ENTER,shortKey:!0,shiftKey:!1,handler:handler}}(quillConfig.modules.keyboard,(function(){Editor_logging("submitting via keyboard..."),_this8.props.editable&&(_this8.props.onTextChange(_this8.editor.getContents()),_this8.props.onSubmit())})),this.props.singleLine&&(Editor_logging("adding no linebreak handler..."),withNoLinebreakHandler(quillConfig.modules.keyboard),this.addRemoveLinebreaksOnPasteHandler()),this.editor=new Editor_QuillModule(this.editorContainer.current,quillConfig),null===(_this$props$onEditorC=(_this$props=this.props).onEditorCreated)||void 0===_this$props$onEditorC||_this$props$onEditorC.call(_this$props,this.editor),this.addCharactersTypedHandler(),this.addEmptyLineTooltipHandler(),this.addTextChangeHandler(),this.addImagesPasteHandler(),this.editor.enable(this.props.editable),loggingVerbose(this.props.initialText),this.props.initialText&&this.editor.setContents(this.props.initialText),this.props.focus&&this.editor.focus(),this.editor.clipboard.addMatcher(Node.ELEMENT_NODE,(function(node,delta){return delta.forEach((function(e){e.attributes&&(e.attributes.color=void 0,e.attributes.background=void 0)})),delta})),this.props.onIsEmptyChange&&this.props.onIsEmptyChange(1==this.editor.getLength()),this.props.onCharactersChange&&this.props.onCharactersChange(this.editor.getLength()),this.setState({loaded:!0}),Editor_logging.enabled&&(Editor_logging("Adding editor to global namespace."),window.editor=this.editor)}},{key:"componentWillUnmount",value:function componentWillUnmount(){var _this$editorContainer3,_this$editorContainer4,_this9=this;(Editor_logging("Unmounting editor"),Editor_logging("Unmounted editor content:"),Editor_logging(this.editor.getContents()),this.eventHandlers.forEach((function(handler){Editor_logging("Removing handler",handler),_this9.editor.off(handler.type,handler.handler)})),this.removeLineBreaksHandler)&&(null===(_this$editorContainer3=this.editorContainer.current)||void 0===_this$editorContainer3||_this$editorContainer3.removeEventListener("paste",this.removeLineBreaksHandler));this.imagePasteHandler&&(null===(_this$editorContainer4=this.editorContainer.current)||void 0===_this$editorContainer4||_this$editorContainer4.removeEventListener("paste",this.imagePasteHandler))}},{key:"render",value:function render(){var _this10=this;return react_default.a.createElement(react_default.a.Fragment,null,react_default.a.createElement("div",{className:"jsx-16231013 "+(classnames_default()("editor",{loaded:this.state.loaded,"view-only":!this.props.editable})||"")},react_default.a.createElement("div",{className:"jsx-16231013 spinner"},react_default.a.createElement(src_Spinner,null)),react_default.a.createElement(Toolbar,{ref:this.toolbarContainer,loaded:this.state.loaded}),this.props.editable&&react_default.a.createElement(src_Tooltip,{top:this.state.tooltipPostion.top,right:this.state.tooltipPostion.right,onInsertEmbed:function onInsertEmbed(_ref){var type=_ref.type,embed=_ref.embed;_this10.addEmbed(type,embed)},show:this.state.showTooltip&&0!=this.props.showTooltip,preventUpdate:function preventUpdate(shouldPrevent){_this10.skipTooltipUpdates=shouldPrevent}}),react_default.a.createElement("div",{ref:this.editorContainer,className:"jsx-16231013 editor-quill"})),react_default.a.createElement(style_default.a,{id:"16231013"},[".editor.jsx-16231013,.editor-quill.jsx-16231013,.editor-quill.jsx-16231013,.editor.jsx-16231013 .ql-editor{min-height:inherit;}",".editor.jsx-16231013{position:relative;height:100%;}",".editor-quill.jsx-16231013{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;font-size:medium;}",".loaded.jsx-16231013 .spinner.jsx-16231013{display:none;}",".spinner.jsx-16231013{text-align:center;}",".editor.view-only.jsx-16231013 .editor-quill.jsx-16231013 .ql-editor>*{cursor:auto !important;}",".editor.jsx-16231013 .ql-editor{overflow:visible;height:100%;padding:0;}",".editor-quill.jsx-16231013 .ql-tooltip{z-index:5;}",".editor.jsx-16231013 .ql-editor p{word-break:break-word !important;}",".editor.jsx-16231013 .ql-container a{white-space:normal !important;word-break:break-word !important;}"]),react_default.a.createElement(CustomNodesStyle.default,null))}}]),Editor}(react.Component),Toolbar=Object(react.forwardRef)((function(_ref2,ref){var loaded=_ref2.loaded;return react_default.a.createElement(react_default.a.Fragment,null,react_default.a.createElement("div",{ref:ref,className:"jsx-754774205 "+(classnames_default()("toolbar","ql-toolbar",{loaded:loaded})||"")},react_default.a.createElement("span",{className:"jsx-754774205 ql-formats"},react_default.a.createElement("button",{className:"jsx-754774205 ql-bold"}),react_default.a.createElement("button",{className:"jsx-754774205 ql-italic"}),react_default.a.createElement("button",{className:"jsx-754774205 ql-underline"}),react_default.a.createElement("button",{className:"jsx-754774205 ql-strike"}),react_default.a.createElement("button",{className:"jsx-754774205 ql-link"}),react_default.a.createElement("button",{className:"jsx-754774205 ql-inline-spoilers"})),react_default.a.createElement("span",{className:"jsx-754774205 ql-formats"},react_default.a.createElement("select",{className:"jsx-754774205 ql-header"},react_default.a.createElement("option",{value:"h1",className:"jsx-754774205"},"Heading 1"),react_default.a.createElement("option",{value:"h2",className:"jsx-754774205"},"Heading 2"),react_default.a.createElement("option",{value:"",className:"jsx-754774205"},"Normal")))),react_default.a.createElement(style_default.a,{id:"754774205"},[".toolbar.jsx-754774205{display:none;}",".toolbar.loaded.jsx-754774205{display:block;}"]))})),src_Editor=Editor_Editor;try{Editor_Editor.displayName="Editor",Editor_Editor.__docgenInfo={description:"",displayName:"Editor",props:{editable:{defaultValue:null,description:"",name:"editable",required:!0,type:{name:"boolean"}},focus:{defaultValue:null,description:"",name:"focus",required:!0,type:{name:"boolean"}},initialText:{defaultValue:null,description:"",name:"initialText",required:!0,type:{name:"any"}},singleLine:{defaultValue:null,description:"",name:"singleLine",required:!1,type:{name:"boolean"}},showTooltip:{defaultValue:null,description:"",name:"showTooltip",required:!1,type:{name:"boolean"}},onTextChange:{defaultValue:null,description:"",name:"onTextChange",required:!0,type:{name:"(_: any) => void"}},onIsEmptyChange:{defaultValue:null,description:"",name:"onIsEmptyChange",required:!1,type:{name:"(empty: boolean) => void"}},onCharactersChange:{defaultValue:null,description:"",name:"onCharactersChange",required:!1,type:{name:"(_: number) => void"}},onSubmit:{defaultValue:null,description:"",name:"onSubmit",required:!0,type:{name:"() => void"}},onEditorCreated:{defaultValue:null,description:"",name:"onEditorCreated",required:!1,type:{name:"(editor: Quill) => void"}},onEmbedLoaded:{defaultValue:null,description:"",name:"onEmbedLoaded",required:!1,type:{name:"() => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Editor.tsx#Editor"]={docgenInfo:Editor_Editor.__docgenInfo,name:"Editor",path:"src/Editor.tsx#Editor"})}catch(__react_docgen_typescript_loader_error){}try{Editor_Editor.displayName="Editor",Editor_Editor.__docgenInfo={description:"",displayName:"Editor",props:{editable:{defaultValue:null,description:"",name:"editable",required:!0,type:{name:"boolean"}},focus:{defaultValue:null,description:"",name:"focus",required:!0,type:{name:"boolean"}},initialText:{defaultValue:null,description:"",name:"initialText",required:!0,type:{name:"any"}},singleLine:{defaultValue:null,description:"",name:"singleLine",required:!1,type:{name:"boolean"}},showTooltip:{defaultValue:null,description:"",name:"showTooltip",required:!1,type:{name:"boolean"}},onTextChange:{defaultValue:null,description:"",name:"onTextChange",required:!0,type:{name:"(_: any) => void"}},onIsEmptyChange:{defaultValue:null,description:"",name:"onIsEmptyChange",required:!1,type:{name:"((empty: boolean) => void)"}},onCharactersChange:{defaultValue:null,description:"",name:"onCharactersChange",required:!1,type:{name:"((_: number) => void)"}},onSubmit:{defaultValue:null,description:"",name:"onSubmit",required:!0,type:{name:"() => void"}},onEditorCreated:{defaultValue:null,description:"",name:"onEditorCreated",required:!1,type:{name:"((editor: Quill) => void)"}},onEmbedLoaded:{defaultValue:null,description:"",name:"onEmbedLoaded",required:!1,type:{name:"(() => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Editor.tsx#Editor"]={docgenInfo:Editor_Editor.__docgenInfo,name:"Editor",path:"src/Editor.tsx#Editor"})}catch(__react_docgen_typescript_loader_error){}var setTumblrEmbedFetcher=function setTumblrEmbedFetcher(fetcher){"undefined"!=typeof window&&(__webpack_require__(98).default.getTumblrEmbedFromUrl=fetcher)},setOEmbedFetcher=function setOEmbedFetcher(fetcher){"undefined"!=typeof window&&(__webpack_require__(48).default.getOEmbedFromUrl=fetcher)};__webpack_exports__.a=src_Editor;try{setTumblrEmbedFetcher.displayName="setTumblrEmbedFetcher",setTumblrEmbedFetcher.__docgenInfo={description:"",displayName:"setTumblrEmbedFetcher",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/index.ts#setTumblrEmbedFetcher"]={docgenInfo:setTumblrEmbedFetcher.__docgenInfo,name:"setTumblrEmbedFetcher",path:"src/index.ts#setTumblrEmbedFetcher"})}catch(__react_docgen_typescript_loader_error){}try{setOEmbedFetcher.displayName="setOEmbedFetcher",setOEmbedFetcher.__docgenInfo={description:"",displayName:"setOEmbedFetcher",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/index.ts#setOEmbedFetcher"]={docgenInfo:setOEmbedFetcher.__docgenInfo,name:"setOEmbedFetcher",path:"src/index.ts#setOEmbedFetcher"})}catch(__react_docgen_typescript_loader_error){}try{src.displayName="src",src.__docgenInfo={description:"",displayName:"src",props:{length:{defaultValue:null,description:"Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",name:"length",required:!0,type:{name:"number"}},toString:{defaultValue:null,description:"Returns a string representation of an array.",name:"toString",required:!1,type:{name:"() => string"}},toLocaleString:{defaultValue:null,description:"Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",name:"toLocaleString",required:!1,type:{name:"() => string"}},pop:{defaultValue:null,description:"Removes the last element from an array and returns it.",name:"pop",required:!0,type:{name:"() => DeltaOperation"}},push:{defaultValue:null,description:"Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",name:"push",required:!0,type:{name:"(...items: DeltaOperation[]) => number"}},concat:{defaultValue:null,description:"Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",name:"concat",required:!0,type:{name:"{ (...items: ConcatArray<DeltaOperation>[]): DeltaOperation[]; (...items: (DeltaOperation | ConcatArray<DeltaOperation>)[]): DeltaOperation[]; }"}},join:{defaultValue:null,description:"Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",name:"join",required:!0,type:{name:"(separator?: string) => string"}},reverse:{defaultValue:null,description:"Reverses the elements in an Array.",name:"reverse",required:!0,type:{name:"() => DeltaOperation[]"}},shift:{defaultValue:null,description:"Removes the first element from an array and returns it.",name:"shift",required:!0,type:{name:"() => DeltaOperation"}},slice:{defaultValue:null,description:"Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.",name:"slice",required:!0,type:{name:"(start?: number, end?: number) => DeltaOperation[]"}},sort:{defaultValue:null,description:"Sorts an array.\n@param compareFn Function used to determine the order of the elements. It is expected to return\ra negative value if first argument is less than second argument, zero if they're equal and a positive\rvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r```ts\r[11,2,22,1].sort((a, b) => a - b)\r```",name:"sort",required:!0,type:{name:"(compareFn?: (a: DeltaOperation, b: DeltaOperation) => number) => DeltaOperation[]"}},splice:{defaultValue:null,description:"Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",name:"splice",required:!0,type:{name:"{ (start: number, deleteCount?: number): DeltaOperation[]; (start: number, deleteCount: number, ...items: DeltaOperation[]): DeltaOperation[]; }"}},unshift:{defaultValue:null,description:"Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",name:"unshift",required:!0,type:{name:"(...items: DeltaOperation[]) => number"}},indexOf:{defaultValue:null,description:"Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",name:"indexOf",required:!0,type:{name:"(searchElement: DeltaOperation, fromIndex?: number) => number"}},lastIndexOf:{defaultValue:null,description:"Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",name:"lastIndexOf",required:!0,type:{name:"(searchElement: DeltaOperation, fromIndex?: number) => number"}},every:{defaultValue:null,description:"Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",name:"every",required:!0,type:{name:"(callbackfn: (value: DeltaOperation, index: number, array: DeltaOperation[]) => unknown, thisArg?: any) => boolean"}},some:{defaultValue:null,description:"Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",name:"some",required:!0,type:{name:"(callbackfn: (value: DeltaOperation, index: number, array: DeltaOperation[]) => unknown, thisArg?: any) => boolean"}},forEach:{defaultValue:null,description:"Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"forEach",required:!0,type:{name:"(callbackfn: (value: DeltaOperation, index: number, array: DeltaOperation[]) => void, thisArg?: any) => void"}},map:{defaultValue:null,description:"Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"map",required:!0,type:{name:"<U>(callbackfn: (value: DeltaOperation, index: number, array: DeltaOperation[]) => U, thisArg?: any) => U[]"}},filter:{defaultValue:null,description:"Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"filter",required:!0,type:{name:"{ <S extends DeltaOperation>(callbackfn: (value: DeltaOperation, index: number, array: DeltaOperation[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: DeltaOperation, index: number, array: DeltaOperation[]) => unknown, thisArg?: any): DeltaOperation[]; }"}},reduce:{defaultValue:null,description:"Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",name:"reduce",required:!0,type:{name:"{ (callbackfn: (previousValue: DeltaOperation, currentValue: DeltaOperation, currentIndex: number, array: DeltaOperation[]) => DeltaOperation): DeltaOperation; (callbackfn: (previousValue: DeltaOperation, currentValue: DeltaOperation, currentIndex: number, array: DeltaOperation[]) => DeltaOperation, initialValue: De..."}},reduceRight:{defaultValue:null,description:"Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",name:"reduceRight",required:!0,type:{name:"{ (callbackfn: (previousValue: DeltaOperation, currentValue: DeltaOperation, currentIndex: number, array: DeltaOperation[]) => DeltaOperation): DeltaOperation; (callbackfn: (previousValue: DeltaOperation, currentValue: DeltaOperation, currentIndex: number, array: DeltaOperation[]) => DeltaOperation, initialValue: De..."}},find:{defaultValue:null,description:"Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",name:"find",required:!0,type:{name:"{ <S extends DeltaOperation>(predicate: (this: void, value: DeltaOperation, index: number, obj: DeltaOperation[]) => value is S, thisArg?: any): S; (predicate: (value: DeltaOperation, index: number, obj: DeltaOperation[]) => unknown, thisArg?: any): DeltaOperation; }"}},findIndex:{defaultValue:null,description:"Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",name:"findIndex",required:!0,type:{name:"(predicate: (value: DeltaOperation, index: number, obj: DeltaOperation[]) => unknown, thisArg?: any) => number"}},fill:{defaultValue:null,description:"Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",name:"fill",required:!0,type:{name:"(value: DeltaOperation, start?: number, end?: number) => DeltaOperation[]"}},copyWithin:{defaultValue:null,description:"Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",name:"copyWithin",required:!0,type:{name:"(target: number, start: number, end?: number) => DeltaOperation[]"}},"__@iterator":{defaultValue:null,description:"Iterator",name:"__@iterator",required:!0,type:{name:"() => IterableIterator<DeltaOperation>"}},entries:{defaultValue:null,description:"Returns an iterable of key, value pairs for every entry in the array",name:"entries",required:!0,type:{name:"() => IterableIterator<[number, DeltaOperation]>"}},keys:{defaultValue:null,description:"Returns an iterable of keys in the array",name:"keys",required:!0,type:{name:"() => IterableIterator<number>"}},values:{defaultValue:null,description:"Returns an iterable of values in the array",name:"values",required:!0,type:{name:"() => IterableIterator<DeltaOperation>"}},"__@unscopables":{defaultValue:null,description:"Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",name:"__@unscopables",required:!0,type:{name:"() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"}},includes:{defaultValue:null,description:"Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",name:"includes",required:!0,type:{name:"(searchElement: DeltaOperation, fromIndex?: number) => boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/index.ts#src"]={docgenInfo:src.__docgenInfo,name:"src",path:"src/index.ts#src"})}catch(__react_docgen_typescript_loader_error){}},355:function(module,exports,__webpack_require__){__webpack_require__(356),__webpack_require__(502),__webpack_require__(503),__webpack_require__(727),module.exports=__webpack_require__(731)},421:function(module,exports){},48:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(5),__webpack_require__(9),__webpack_require__(11),__webpack_require__(53),__webpack_require__(10),__webpack_require__(14),__webpack_require__(35),__webpack_require__(21),__webpack_require__(42),__webpack_require__(33),__webpack_require__(36),__webpack_require__(4),__webpack_require__(333),__webpack_require__(37),__webpack_require__(54),__webpack_require__(15),__webpack_require__(12),__webpack_require__(16),__webpack_require__(70);var quill__WEBPACK_IMPORTED_MODULE_19__=__webpack_require__(13),quill__WEBPACK_IMPORTED_MODULE_19___default=__webpack_require__.n(quill__WEBPACK_IMPORTED_MODULE_19__),_utils__WEBPACK_IMPORTED_MODULE_20__=__webpack_require__(6);function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _get(target,property,receiver){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function _get(target,property,receiver){var base=function _superPropBase(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(receiver):desc.value}})(target,property,receiver||target)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}var BlockEmbed=quill__WEBPACK_IMPORTED_MODULE_19___default.a.import("blots/block/embed"),Link=quill__WEBPACK_IMPORTED_MODULE_19___default.a.import("formats/link"),logging=__webpack_require__(30)("bobapost:embeds:oembeds"),attachObserver=function attachObserver(domNode){var _this=this;new MutationObserver((function(mutations,observer){logging("Mutation occurred in embedded node.");var rootNode=_this.getRootNode(mutations);if(rootNode){var currentHeight=rootNode.getBoundingClientRect().height;logging("Current height of observed node: ".concat(currentHeight)),observer.disconnect();setTimeout((function checkNewHeight(){logging("New height of observed node: ".concat(rootNode.getBoundingClientRect().height)),rootNode.getBoundingClientRect().height==currentHeight?setTimeout(checkNewHeight,100):_this.onLoadEnd(domNode)}),100)}})).observe(domNode,{subtree:!0,childList:!0})},OEmbed=function(_BlockEmbed){!function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(OEmbed,_BlockEmbed);var _super=_createSuper(OEmbed);function OEmbed(){return _classCallCheck(this,OEmbed),_super.apply(this,arguments)}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}(OEmbed,null,[{key:"icon",value:function icon(){return""}},{key:"onLoadEnd",value:function onLoadEnd(domNode,rootNode){var _loadingMessage$paren,_this2=this,loadingMessage=domNode.querySelector(".loading-message");logging(loadingMessage),null==loadingMessage||null===(_loadingMessage$paren=loadingMessage.parentNode)||void 0===_loadingMessage$paren||_loadingMessage$paren.removeChild(loadingMessage),domNode.classList.add("loaded"),domNode.classList.remove("loading");var oEmbedNode=domNode.querySelector(".embed-node");null==oEmbedNode||oEmbedNode.classList.add("loaded"),null==oEmbedNode||oEmbedNode.classList.remove("loading"),setTimeout((function(){var _this2$onLoadCallback,embedSizes=rootNode?rootNode.getBoundingClientRect():domNode.getBoundingClientRect();domNode.dataset.embedWidth="".concat(embedSizes.width),domNode.dataset.embedHeight="".concat(embedSizes.height),logging(domNode),null===(_this2$onLoadCallback=_this2.onLoadCallback)||void 0===_this2$onLoadCallback||_this2$onLoadCallback.call(_this2)}),200)}},{key:"getRootNode",value:function getRootNode(mutations){var _mutations$,_mutations$$addedNode,_mutations$2;return"IFRAME"==(null===(_mutations$=mutations[0])||void 0===_mutations$||null===(_mutations$$addedNode=_mutations$.addedNodes[0])||void 0===_mutations$$addedNode?void 0:_mutations$$addedNode.nodeName)?null===(_mutations$2=mutations[0])||void 0===_mutations$2?void 0:_mutations$2.addedNodes[0]:null}},{key:"loadPost",value:function loadPost(node,data){var oEmbedNode=document.createElement("div");oEmbedNode.dataset.url=data.url,oEmbedNode.classList.add("embed-node"),oEmbedNode.classList.add("loading"),node.dataset.url=data.url,node.appendChild(oEmbedNode),oEmbedNode.innerHTML=data.html,logging(this),logging(this.SKIP_LOADING),this.SKIP_LOADING?(logging("Finished loading (no observer)."),this.onLoadEnd(node)):(logging("Attaching loading observer."),attachObserver.call(this,node))}},{key:"renderError",value:function renderError(node,url){Object(_utils__WEBPACK_IMPORTED_MODULE_20__.addErrorMessage)(node,{message:"The embeds bug strikes again!",url:url}),this.onLoadEnd(node)}},{key:"renderFromUrl",value:function renderFromUrl(node,url){var _this3=this;return url?(OEmbed.getOEmbedFromUrl(url).then((function(data){if(!data.html)return _this3.renderError(node,url),void(node.dataset.url=url);_this3.loadPost(node,{html:data.html,url:url})})).catch((function(err){console.log(err)})),node):(Object(_utils__WEBPACK_IMPORTED_MODULE_20__.addErrorMessage)(node,{message:"No valid url found in embed post!",url:"#"}),this.onLoadEnd(node),node)}},{key:"create",value:function create(value){var _this4=this;logging("Creating oEmbed object with value:"),logging(value);var node=_get(_getPrototypeOf(OEmbed),"create",this).call(this);if(node.contentEditable=!1,node.dataset.rendered=!1,Object(_utils__WEBPACK_IMPORTED_MODULE_20__.addLoadingMessage)(node,{color:this.LOADING_BACKGROUND_COLOR,message:this.LOADING_TEXT,url:value.url,width:value.embedWidth,height:value.embedHeight}),Object(_utils__WEBPACK_IMPORTED_MODULE_20__.addEmbedOverlay)(node,{onClose:function onClose(){var _this4$onRemoveReques;null===(_this4$onRemoveReques=_this4.onRemoveRequest)||void 0===_this4$onRemoveReques||_this4$onRemoveReques.call(_this4,node)}}),node.classList.add("ql-embed","loading"),value.embedHeight&&value.embedWidth){var ratio=parseInt(value.embedHeight)/parseInt(value.embedWidth)*100;logging(ratio),node.style.setProperty("--ratio-padding","".concat(ratio,"%"))}return this.renderFromUrl(node,this.sanitize(value.url))}},{key:"setOnLoadCallback",value:function setOnLoadCallback(callback){OEmbed.onLoadCallback=callback}},{key:"value",value:function value(domNode){return{url:domNode.dataset.url,embedWidth:domNode.dataset.embedWidth,embedHeight:domNode.dataset.embedHeight}}},{key:"sanitize",value:function sanitize(url){return url?(-1!==url.indexOf("?")&&(url=url.substring(0,url.indexOf("?"))),Link.sanitize(url)):""}}]),OEmbed}(BlockEmbed);!function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(OEmbed,"getOEmbedFromUrl",(function(url){throw new Error("unimplemented")})),OEmbed.blotName="oembed-embed",OEmbed.tagName="div",OEmbed.className="ql-oembed-embed",__webpack_exports__.default=OEmbed;try{OEmbed.displayName="OEmbed",OEmbed.__docgenInfo={description:"TumblrEmbed represents a tumblr post embedded into the editor.",displayName:"OEmbed",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/custom-nodes/OEmbedBase.ts#OEmbed"]={docgenInfo:OEmbed.__docgenInfo,name:"OEmbed",path:"src/custom-nodes/OEmbedBase.ts#OEmbed"})}catch(__react_docgen_typescript_loader_error){}},503:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(123)},6:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"addEmbedOverlay",(function(){return addEmbedOverlay})),__webpack_require__.d(__webpack_exports__,"addLoadingMessage",(function(){return addLoadingMessage})),__webpack_require__.d(__webpack_exports__,"addErrorMessage",(function(){return addErrorMessage}));__webpack_require__(333);var react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__),react_dom__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(71),react_dom__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_2__),CloseButton=function CloseButton(props){return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("svg",props,react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("path",{d:"M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z"}))};CloseButton.defaultProps={xmlns:"http://www.w3.org/2000/svg",width:"18",height:"18",viewBox:"0 0 18 18"};var SpoilersIcon=function SpoilersIcon(props){return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("svg",props,react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("path",{className:"ql-fill",d:"M11.885 14.988l3.104-3.098L15 12c0 1.654-1.346 3-3 3l-.115-.012zm8.048-8.032l-3.274 3.268c.212.554.341 1.149.341 1.776 0 2.757-2.243 5-5 5-.631 0-1.229-.13-1.785-.344l-2.377 2.372c1.276.588 2.671.972 4.177.972C19.748 20 24 11.551 24 11.551s-1.415-2.478-4.067-4.595zm1.431-3.536L2.745 22l-1.382-1.422 3.455-3.447C1.796 14.681 0 11.551 0 11.551S4.446 4 12.015 4c1.825 0 3.456.426 4.886 1.075L19.982 2l1.382 1.42zM7.613 14.342l1.519-1.515A2.938 2.938 0 0 1 9 12c0-1.654 1.346-3 3-3 .291 0 .567.055.833.134l1.518-1.515A4.906 4.906 0 0 0 12 7c-2.757 0-5 2.243-5 5 0 .852.235 1.641.613 2.342z"}))};SpoilersIcon.defaultProps={xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24"};var logging=__webpack_require__(30)("bobapost:embeds:utils"),addEmbedOverlay=function addEmbedOverlay(embedRoot,callbacks,initialSettings){var containerDiv=document.createElement("div");containerDiv.classList.add("embed-overlay");var closeButton=document.createElement("div");if(closeButton.classList.add("close-button"),react_dom__WEBPACK_IMPORTED_MODULE_2___default.a.render(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(CloseButton,{},null),closeButton),containerDiv.appendChild(closeButton),closeButton.addEventListener("click",(function(){callbacks.onClose(embedRoot)})),callbacks.onMarkSpoilers){var optionsOverlay=document.createElement("div");optionsOverlay.classList.add("options-overlay");var spoilersButton=document.createElement("div");spoilersButton.classList.add("spoilers-button"),react_dom__WEBPACK_IMPORTED_MODULE_2___default.a.render(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(SpoilersIcon,{},null),spoilersButton),optionsOverlay.appendChild(spoilersButton),spoilersButton.classList.toggle("active",!!(null==initialSettings?void 0:initialSettings.isSpoilers)),containerDiv.classList.toggle("spoilers",!!(null==initialSettings?void 0:initialSettings.isSpoilers)),spoilersButton.addEventListener("click",(function(e){var _callbacks$onMarkSpoi;spoilersButton.classList.toggle("active"),null===(_callbacks$onMarkSpoi=callbacks.onMarkSpoilers)||void 0===_callbacks$onMarkSpoi||_callbacks$onMarkSpoi.call(callbacks,embedRoot,spoilersButton.classList.contains("active")),containerDiv.classList.toggle("spoilers",spoilersButton.classList.contains("active")),e.stopPropagation(),e.preventDefault()})),containerDiv.appendChild(optionsOverlay)}return embedRoot.appendChild(containerDiv),embedRoot},addLoadingMessage=function addLoadingMessage(embedRoot,_ref){var color=_ref.color,message=_ref.message,url=_ref.url,width=_ref.width,height=_ref.height,loadingMessage=document.createElement("div"),linkToOriginal=document.createElement("a");if(linkToOriginal.innerHTML=message||"Loading...",linkToOriginal.href=url,loadingMessage.appendChild(linkToOriginal),loadingMessage.classList.add("loading-message"),color&&(loadingMessage.style.backgroundColor=color),width&&height){var ratio=parseInt(height)/parseInt(width)*100;logging(ratio),loadingMessage.style.paddingTop="".concat(ratio,"%")}return embedRoot.appendChild(loadingMessage),embedRoot},addErrorMessage=function addErrorMessage(embedRoot,_ref2){var message=_ref2.message,url=_ref2.url,loadingMessage=document.createElement("div"),linkToOriginal=document.createElement("a");return linkToOriginal.innerHTML=message,linkToOriginal.href=url,loadingMessage.appendChild(linkToOriginal),loadingMessage.classList.add("error-message"),embedRoot.appendChild(loadingMessage),embedRoot}},727:function(module,exports,__webpack_require__){"use strict";__webpack_require__(5),__webpack_require__(80),__webpack_require__(45),__webpack_require__(91),__webpack_require__(21),__webpack_require__(42),__webpack_require__(331),__webpack_require__(60),__webpack_require__(47);var _clientApi=__webpack_require__(138),_clientLogger=__webpack_require__(79),_configFilename=__webpack_require__(728);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(_configFilename.args||_configFilename.argTypes)&&_clientLogger.logger.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify({args:_configFilename.args,argTypes:_configFilename.argTypes})),_configFilename.decorators&&_configFilename.decorators.forEach((function(decorator){return(0,_clientApi.addDecorator)(decorator,!1)})),(_configFilename.parameters||_configFilename.globals||_configFilename.globalTypes)&&(0,_clientApi.addParameters)(_objectSpread(_objectSpread({},_configFilename.parameters),{},{globals:_configFilename.globals,globalTypes:_configFilename.globalTypes}),!1),_configFilename.argTypesEnhancers&&_configFilename.argTypesEnhancers.forEach((function(enhancer){return(0,_clientApi.addArgTypesEnhancer)(enhancer)}))},728:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var _storybook_react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(123),_storybook_addon_viewport__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(344);Object(_storybook_react__WEBPACK_IMPORTED_MODULE_0__.addParameters)({viewport:{viewports:_storybook_addon_viewport__WEBPACK_IMPORTED_MODULE_1__.INITIAL_VIEWPORTS}})},731:function(module,exports,__webpack_require__){"use strict";(function(module){(0,__webpack_require__(123).configure)([__webpack_require__(732)],module,!1)}).call(this,__webpack_require__(137)(module))},732:function(module,exports,__webpack_require__){var map={"./0-Editor.stories.tsx":733,"./1-Embeds.stories.tsx":784,"./2-EmbedErrors.stories.tsx":785,"./4-Spoilers.stories.tsx":786};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=732},733:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"EditorSimple",(function(){return EditorSimple})),__webpack_require__.d(__webpack_exports__,"SingleLineEditor",(function(){return SingleLineEditor})),__webpack_require__.d(__webpack_exports__,"EditorState",(function(){return EditorState})),__webpack_require__.d(__webpack_exports__,"ImageLoading",(function(){return ImageLoading}));__webpack_require__(5),__webpack_require__(9),__webpack_require__(11),__webpack_require__(80),__webpack_require__(45),__webpack_require__(61),__webpack_require__(34),__webpack_require__(10),__webpack_require__(150),__webpack_require__(46),__webpack_require__(14),__webpack_require__(41),__webpack_require__(91),__webpack_require__(21),__webpack_require__(42),__webpack_require__(331),__webpack_require__(60),__webpack_require__(4),__webpack_require__(15),__webpack_require__(12),__webpack_require__(47),__webpack_require__(16),__webpack_require__(70);var react__WEBPACK_IMPORTED_MODULE_23__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_23___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_23__),_src__WEBPACK_IMPORTED_MODULE_24__=__webpack_require__(3);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}__webpack_exports__.default={title:"Editor Preview",component:_src__WEBPACK_IMPORTED_MODULE_24__.a};var EditorSimple=function EditorSimple(){return react__WEBPACK_IMPORTED_MODULE_23___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_23___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_24__.a,{editable:!0,initialText:JSON.parse('[{"insert":"Open RP"},{"attributes":{"header":1},"insert":"\\n"},{"insert":{"block-image":"https://cdn.discordapp.com/attachments/443967088118333442/691486081895628830/unknown.png"}}, {"attributes":{"italic":true},"insert":"You have my sword..."}]'),onTextChange:function onTextChange(){console.log("changed!")},focus:!0,onIsEmptyChange:function onIsEmptyChange(){console.log("empty!")},onSubmit:function onSubmit(){console.log("submit!")}}))};EditorSimple.story={name:"simple"};var SingleLineEditor=function SingleLineEditor(){return react__WEBPACK_IMPORTED_MODULE_23___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_23___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_24__.a,{editable:!0,initialText:JSON.parse('[{"insert":"This is a single line editor."}]'),onTextChange:function onTextChange(){console.log("changed!")},focus:!0,singleLine:!0,onIsEmptyChange:function onIsEmptyChange(){console.log("empty!")},onSubmit:function onSubmit(){console.log("submit!")}}))};SingleLineEditor.story={name:"single line"};var EditorState=function EditorState(){var _React$useState2=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_23___default.a.useState(!1),2),enabled=_React$useState2[0],setEnabled=_React$useState2[1];return react__WEBPACK_IMPORTED_MODULE_23___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_23___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_23___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_24__.a,{editable:enabled,initialText:JSON.parse('[{"insert":"Open RP"},{"attributes":{"header":1},"insert":"\\n"},{"insert":{"block-image":"https://cdn.discordapp.com/attachments/443967088118333442/691486081895628830/unknown.png"}}, {"attributes":{"italic":true},"insert":"You have my sword..."}]'),onTextChange:function onTextChange(){console.log("changed!")},focus:!0,onIsEmptyChange:function onIsEmptyChange(){console.log("empty!")},onSubmit:function onSubmit(){console.log("submit!")}})),react__WEBPACK_IMPORTED_MODULE_23___default.a.createElement("input",{type:"button",onClick:function onClick(e){setEnabled(!enabled)},value:"toggle enabled (".concat(enabled?"enabled":"disabled",")")}))};EditorState.story={name:"state toggle"};var ImageLoading=function ImageLoading(){var _React$useState4=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_23___default.a.useState(JSON.parse('[{"insert":"Open RP"},{"attributes":{"header":1},"insert":"\\n"},{"insert":{"block-image":"https://cdn.discordapp.com/attachments/443967088118333442/691486081895628830/unknown.png"}}, {"attributes":{"italic":true},"insert":"You have my sword..."}]')),2),text=_React$useState4[0],setText=_React$useState4[1],_React$useState6=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_23___default.a.useState(!1),2),loading=_React$useState6[0],setLoading=_React$useState6[1],_React$useState8=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_23___default.a.useState(null),2),quillEditor=_React$useState8[0],setEditor=_React$useState8[1];return react__WEBPACK_IMPORTED_MODULE_23___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_23___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_23___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_24__.a,{editable:!0,initialText:text,onTextChange:function onTextChange(text){setText(text)},focus:!0,onIsEmptyChange:function onIsEmptyChange(){console.log("empty!")},onSubmit:function onSubmit(){console.log("submit!")},onEditorCreated:function onEditorCreated(editor){return setEditor(editor)}})),react__WEBPACK_IMPORTED_MODULE_23___default.a.createElement("input",{type:"button",onClick:function onClick(e){setLoading(!0);var images=Object(_src__WEBPACK_IMPORTED_MODULE_24__.b)(text);setTimeout((function(){var replacements=images.reduce((function(obj,image){return _objectSpread(_objectSpread({},obj),{},_defineProperty({},image,"https://pbs.twimg.com/media/EY-RqiyUwAAfgzd?format=png&name=small"))}),{});Object(_src__WEBPACK_IMPORTED_MODULE_24__.c)(text,replacements),console.log(text),setText(text),quillEditor.setContents(text),setLoading(!1)}),3e3)},value:"upload images",disabled:loading}))};ImageLoading.story={name:"image upload"}},747:function(module,exports,__webpack_require__){var map={"./BlockImage":115,"./BlockImage.ts":115,"./CustomNodesStyle":124,"./CustomNodesStyle.tsx":124,"./InlineSpoilers":162,"./InlineSpoilers.ts":162,"./InstagramEmbed":116,"./InstagramEmbed.ts":116,"./OEmbedBase":48,"./OEmbedBase.ts":48,"./PixivEmbed":117,"./PixivEmbed.ts":117,"./RedditEmbed":118,"./RedditEmbed.ts":118,"./TikTokEmbed":119,"./TikTokEmbed.ts":119,"./TumblrEmbed":98,"./TumblrEmbed.tsx":98,"./TweetEmbed":120,"./TweetEmbed.ts":120,"./VimeoEmbed":121,"./VimeoEmbed.ts":121,"./YouTubeEmbed":122,"./YouTubeEmbed.ts":122,"./utils":6,"./utils.ts":6};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=747},767:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(5),__webpack_require__(9),__webpack_require__(11),__webpack_require__(61),__webpack_require__(34),__webpack_require__(10),__webpack_require__(46),__webpack_require__(14),__webpack_require__(41),__webpack_require__(78),__webpack_require__(4),__webpack_require__(15),__webpack_require__(12),__webpack_require__(16),__webpack_require__(70);var styled_jsx_style__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__(31),styled_jsx_style__WEBPACK_IMPORTED_MODULE_15___default=__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_15__),react__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_16___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_16__),react_tenor__WEBPACK_IMPORTED_MODULE_17__=__webpack_require__(347),react_tenor__WEBPACK_IMPORTED_MODULE_17___default=__webpack_require__.n(react_tenor__WEBPACK_IMPORTED_MODULE_17__),_atlaskit_popup__WEBPACK_IMPORTED_MODULE_18__=__webpack_require__(353);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var gifJokes=["Thank you, user! But your gif is in another castle!","These aren't the gifs you're looking for.","F","I don't know what that is, I've never seen that.","HQ! HQ! There's no gif here.","You can't get ye gifs!","The gif is a lie.","You get a gif! You get a gif! Everyone gets... oh, you dont. Sorry."],TenorKeyboard=function TenorKeyboard(props){var _React$useState2=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_16___default.a.useState(gifJokes[0]),2),joke=_React$useState2[0],setJoke=_React$useState2[1],tenor=react__WEBPACK_IMPORTED_MODULE_16___default.a.useRef(null),jokes=react__WEBPACK_IMPORTED_MODULE_16___default.a.useRef(null);return react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_16___default.a.Fragment,null,react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(_atlaskit_popup__WEBPACK_IMPORTED_MODULE_18__.a,{isOpen:props.isOpen,onClose:function onClose(){props.onClose()},placement:"bottom-start",content:function content(){var tries=10;return setTimeout((function maybeFocus(){if(tenor.current){tenor.current.focus();var mountedSetState=tenor.current.mountedSetState,handleSearchChange=tenor.current.handleSearchChange;return tenor.current.handleSearchChange=function(e){""==e.target.value&&(jokes.current.style.display="none"),handleSearchChange.call(tenor.current,e)},void(tenor.current.mountedSetState=function(status){status.pages&&0==status.pages[0].results.length?(jokes.current.style.display="block",setJoke(gifJokes[Math.floor(Math.random()*gifJokes.length)])):jokes.current.style.display="none",mountedSetState.call(tenor.current,status)})}tries>0&&setTimeout(maybeFocus,50),tries--}),1),react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("div",{className:"jsx-1337964858 tenor-picker"},react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("div",{className:"jsx-1337964858"},react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(react_tenor__WEBPACK_IMPORTED_MODULE_17___default.a,{key:"tenor",ref:tenor,token:"POOAW0CATU4O",contentFilter:"off",onSelect:function onSelect(result){props.onClose(result)}})),react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("div",{className:"jsx-1337964858 tenor-joke-container"},react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("div",{ref:jokes,style:{display:"none"},className:"jsx-1337964858 tenor-joke"},joke)))},trigger:function trigger(triggerProps){return null==props.target.current?null:react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("div",_extends({},triggerProps,{style:{position:"absolute",pointerEvents:"none",top:0,right:0,width:props.target.current.clientWidth+"px",opacity:0,height:props.target.current.clientHeight+"px"},className:"jsx-1337964858 "+(triggerProps&&null!=triggerProps.className&&triggerProps.className||"")}))}}),react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(styled_jsx_style__WEBPACK_IMPORTED_MODULE_15___default.a,{id:"1337964858"},[".tenor-picker.jsx-1337964858{max-height:300px;max-width:100vw;width:480px;border-radius:3px;background:black;overflow-x:hidden;}",".tenor-joke-container.jsx-1337964858{background:black;text-align:center;color:gray;font-size:smaller;padding:10px;height:100px;position:relative;}",".tenor-joke.jsx-1337964858{position:absolute;top:50%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%);padding:5px;width:100%;}",".react-tenor{border:0;background:black;}",".react-tenor,.react-tenor--search,.react-tenor--search-bar{border-radius:3px;}",".react-tenor-active .react-tenor--search,.react-tenor-active .react-tenor--search-bar{border-bottom-left-radius:0;border-bottom-right-radius:0;}",".react-tenor--search{border:0;background:#000000;color:white;}",".react-tenor--spinner{top:5px;right:5px;}",".react-tenor--search:focus{box-shadow:none;}",".react-tenor-active{background:black;}",".react-tenor--results{overflow-x:hidden;}",".react-tenor--autocomplete{top:0;}",".react-tenor--suggestions,.tenor-joke-container.jsx-1337964858{border-top:1px solid rgba(255,255,255,0.2);}",".react-tenor--suggestions button{background:rgba(255,255,255,0.2);border:1px solid rgba(255,255,255,0.1);}",".react-tenor--suggestions button:hover{background:rgba(255,255,255,0.3);}"]))};TenorKeyboard.__docgenInfo={description:"",methods:[],displayName:"TenorKeyboard"},__webpack_exports__.default=TenorKeyboard,"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/TenorKeyboard.js"]={name:"TenorKeyboard",docgenInfo:TenorKeyboard.__docgenInfo,path:"src/TenorKeyboard.js"})},783:function(module,exports,__webpack_require__){var map={"./BlockImage":115,"./InstagramEmbed":116,"./PixivEmbed":117,"./RedditEmbed":118,"./TikTokEmbed":119,"./TumblrEmbed":98,"./TweetEmbed":120,"./VimeoEmbed":121,"./YouTubeEmbed":122};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=783},784:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ImageEmbed",(function(){return ImageEmbed})),__webpack_require__.d(__webpack_exports__,"TwitterEmbed",(function(){return TwitterEmbed})),__webpack_require__.d(__webpack_exports__,"EmbedStories",(function(){return EmbedStories})),__webpack_require__.d(__webpack_exports__,"TumblrStory",(function(){return TumblrStory})),__webpack_require__.d(__webpack_exports__,"TikTokStory",(function(){return TikTokStory})),__webpack_require__.d(__webpack_exports__,"InstagramStory",(function(){return InstagramStory})),__webpack_require__.d(__webpack_exports__,"RedditStory",(function(){return RedditStory})),__webpack_require__.d(__webpack_exports__,"PixivStory",(function(){return PixivStory}));__webpack_require__(5),__webpack_require__(9),__webpack_require__(11),__webpack_require__(61),__webpack_require__(34),__webpack_require__(10),__webpack_require__(46),__webpack_require__(14),__webpack_require__(41),__webpack_require__(4),__webpack_require__(95),__webpack_require__(15),__webpack_require__(12),__webpack_require__(16),__webpack_require__(70);var react__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_15___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_15__),_src__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__(3);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var logging=__webpack_require__(30)("bobapost:stories:embeds");__webpack_exports__.default={title:"Embeds Stories",component:_src__WEBPACK_IMPORTED_MODULE_16__.a},Object(_src__WEBPACK_IMPORTED_MODULE_16__.e)((function(url){return logging('""Fetching"" from '.concat(url)),new Promise((function(resolve){setTimeout((function(){resolve({url:"https://turquoisemagpie.tumblr.com/post/618042321716510720/eternity-stuck-in-white-noise-can-drive-you-a",href:"https://embed.tumblr.com/embed/post/2_D8XbYRWYBtQD0A9Pfw-w/618042321716510720",did:"22a0a2f8b7a33dc50bbf5f49fb53f92b181a88aa"})}),25e3)}))}));Object(_src__WEBPACK_IMPORTED_MODULE_16__.d)((function(url){return logging('""Fetching"" from '.concat(url)),new Promise((function(resolve){fetch("http://localhost:8061/iframely?uri=".concat(url)).then((function(response){setTimeout((function(){resolve(response.json())}),1e3)}))}))}));var ImageEmbed=function ImageEmbed(){return react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_16__.a,{editable:!0,initialText:JSON.parse('[{"insert":"Image Embed"},{"attributes":{"header":1},"insert":"\\n"},{"insert":{"block-image":"https://pbs.twimg.com/media/EY-RqiyUwAAfgzd?format=png&name=small"}}]'),onTextChange:function onTextChange(){logging("changed!")},focus:!0,onIsEmptyChange:function onIsEmptyChange(){logging("empty!")},onSubmit:function onSubmit(){logging("submit!")}}))};ImageEmbed.story={name:"image"};var TwitterEmbed=function TwitterEmbed(){var _React$useState2=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_15___default.a.useState(!0),2),loading=_React$useState2[0],setLoading=_React$useState2[1];return react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_16__.a,{editable:!0,initialText:JSON.parse('{"ops":[{"insert":"Twitter Embed!"},{"attributes":{"header":1},"insert":"\\n"},{"insert":{"tweet":{"embedHeight": "596", "embedWidth": "500", "url": "https://twitter.com/BobaBoard/status/1263913643650908160"}}},{"insert":"\\n"}]}'),onTextChange:function onTextChange(){logging("changed!")},focus:!0,onIsEmptyChange:function onIsEmptyChange(){logging("empty!")},onSubmit:function onSubmit(){logging("submit!")},onEmbedLoaded:function onEmbedLoaded(){setLoading(!1)}})),"Embed Status: ",loading?"loading":"loaded",".")};TwitterEmbed.story={name:"twitter"};var EmbedStories=function EmbedStories(){return react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_16__.a,{editable:!0,initialText:JSON.parse('[{"insert":"Open RP"},{"attributes":{"header":1},"insert":"\\n"},{"insert":{"youtube-video":"https://www.youtube.com/embed/ROPpn-QcLZM"}},{"insert":"\\n"}]'),onTextChange:function onTextChange(){logging("changed!")},focus:!0,onIsEmptyChange:function onIsEmptyChange(){logging("empty!")},onSubmit:function onSubmit(){logging("submit!")}}))};EmbedStories.story={name:"youtube"};var TumblrStory=function TumblrStory(){return react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_16__.a,{editable:!0,initialText:JSON.parse('[{"insert":"NOTE: Tumblr Posts"},{"attributes":{"header":1},"insert":"\\n"},{"insert":"Tumblr posts are a bit weird. Unless you provide an endpoint that allows fetching the oEmbed data given the Tumblr URL, they won\'t work. It sucks, and I accept solutions.\\n"},{"insert":{"tumblr-embed":{"embedHeight": "840", "embedWidth": "500", "href":"https://embed.tumblr.com/embed/post/2_D8XbYRWYBtQD0A9Pfw-w/618042321716510720","did":"22a0a2f8b7a33dc50bbf5f49fb53f92b181a88aa","url":"https://turquoisemagpie.tumblr.com/post/618042321716510720/eternity-stuck-in-white-noise-can-drive-you-a"}}},{"insert":"\\n"}]'),onTextChange:function onTextChange(){logging("changed!")},focus:!0,onIsEmptyChange:function onIsEmptyChange(){logging("empty!")},onSubmit:function onSubmit(){logging("submit!")}}))};TumblrStory.story={name:"tumblr"};var TikTokStory=function TikTokStory(){return react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_16__.a,{editable:!0,initialText:JSON.parse('[{"insert":"It\'s TikTok time!"},{"attributes":{"header":1},"insert":"\\n"},{"insert":{"tiktok-embed":{"id":"6718335390845095173","url":"https://www.tiktok.com/@scout2015/video/6718335390845095173"}}},{"insert":"\\n"}]'),onTextChange:function onTextChange(){logging("changed!")},focus:!0,onIsEmptyChange:function onIsEmptyChange(){logging("empty!")},onSubmit:function onSubmit(){logging("submit!")}}))};TikTokStory.story={name:"tiktok"};var InstagramStory=function InstagramStory(){return react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_16__.a,{editable:!0,initialText:JSON.parse('[{"insert":"It\'s Instagram time!"},{"attributes":{"header":1},"insert":"\\n"},{"insert":{"instagram-embed":{ "embedWidth": "500", "embedHeight": "898","url":"https://instagram.com/p/89CUyVoVY9/"}}},{"insert":"\\n"}]'),onTextChange:function onTextChange(){logging("changed!")},focus:!0,onIsEmptyChange:function onIsEmptyChange(){logging("empty!")},onSubmit:function onSubmit(){logging("submit!")}}))};InstagramStory.story={name:"instagram"};var RedditStory=function RedditStory(){return react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_16__.a,{editable:!0,initialText:JSON.parse('[{"insert":"It\'s Reddit time!"},{"attributes":{"header":1},"insert":"\\n"},{"insert":{"reddit-embed":{"embedHeight": "629", "embedWidth": "500","url":"https://www.reddit.com/r/nextfuckinglevel/comments/ibikdr/50_year_old_firefighter_deadlifts_600_lbs_of/"}}},{"insert":"\\n"}]'),onTextChange:function onTextChange(){logging("changed!")},focus:!0,onIsEmptyChange:function onIsEmptyChange(){logging("empty!")},onSubmit:function onSubmit(){logging("submit!")}}))};RedditStory.story={name:"reddit"};var PixivStory=function PixivStory(){return react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_16__.a,{editable:!0,initialText:JSON.parse('[{"insert":"It\'s Pixiv time!"},{"attributes":{"header":1},"insert":"\\n"},{"insert":{"pixiv-embed":{"embedHeight": "540.875", "embedWidth": "500","url":"https://www.pixiv.net/en/artworks/83682624"}}},{"insert":"\\n"}]'),onTextChange:function onTextChange(){logging("changed!")},focus:!0,onIsEmptyChange:function onIsEmptyChange(){logging("empty!")},onSubmit:function onSubmit(){logging("submit!")}}))};PixivStory.story={name:"pixiv"}},785:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ImageEmbed",(function(){return ImageEmbed})),__webpack_require__.d(__webpack_exports__,"TwitterEmbed",(function(){return TwitterEmbed})),__webpack_require__.d(__webpack_exports__,"TwitterEmbedNoId",(function(){return TwitterEmbedNoId})),__webpack_require__.d(__webpack_exports__,"EmbedStories",(function(){return EmbedStories})),__webpack_require__.d(__webpack_exports__,"MissingUrl",(function(){return MissingUrl}));__webpack_require__(4),__webpack_require__(95),__webpack_require__(70);var react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__),_src__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(3),logging=__webpack_require__(30)("bobapost:stories:embeds");__webpack_exports__.default={title:"Error Stories",component:_src__WEBPACK_IMPORTED_MODULE_4__.a},Object(_src__WEBPACK_IMPORTED_MODULE_4__.e)((function(url){return logging('""Fetching"" from '.concat(url)),new Promise((function(resolve){setTimeout((function(){resolve({url:"https://turquoisemagpie.tumblr.com/post/618042321716510720/eternity-stuck-in-white-noise-can-drive-you-a",href:"https://embed.tumblr.com/embed/post/2_D8XbYRWYBtQD0A9Pfw-w/618042321716510720",did:"22a0a2f8b7a33dc50bbf5f49fb53f92b181a88aa"})}),5e3)}))}));Object(_src__WEBPACK_IMPORTED_MODULE_4__.d)((function(url){return logging('""Fetching"" from '.concat(url)),new Promise((function(resolve){resolve({})}))}));var ImageEmbed=function ImageEmbed(){return react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_4__.a,{editable:!0,initialText:JSON.parse('[{"insert":"Image Embed"},{"attributes":{"header":1},"insert":"\\n"},{"insert":{"block-image":"https://pbs.twimg.com/media/EY-RqiyUwAAfgzd?format=png&name=small"}}]'),onTextChange:function onTextChange(){logging("changed!")},focus:!0,onIsEmptyChange:function onIsEmptyChange(){logging("empty!")},onSubmit:function onSubmit(){logging("submit!")}}))};ImageEmbed.story={name:"image"};var TwitterEmbed=function TwitterEmbed(){return react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_4__.a,{editable:!0,initialText:JSON.parse('{"ops":[{"insert":"Twitter Embed!"},{"attributes":{"header":1},"insert":"\\n"},{"insert":{"tweet":"https://twitter.com/BobaBoard/status/126393650908160"}},{"insert":"\\n"}]}'),onTextChange:function onTextChange(){logging("changed!")},focus:!0,onIsEmptyChange:function onIsEmptyChange(){logging("empty!")},onSubmit:function onSubmit(){logging("submit!")}}))};TwitterEmbed.story={name:"twitter (wrong id)"};var TwitterEmbedNoId=function TwitterEmbedNoId(){return react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_4__.a,{editable:!0,initialText:JSON.parse('{"ops":[{"insert":"TODO: Fix This!"},{"attributes":{"header":1},"insert":"\\n"},{"insert":{"tweet":"https://twitter.com/BobaBoard/status/12639365090sdsd8160"}},{"insert":"\\n"}]}'),onTextChange:function onTextChange(){logging("changed!")},focus:!0,onIsEmptyChange:function onIsEmptyChange(){logging("empty!")},onSubmit:function onSubmit(){logging("submit!")}}))};TwitterEmbedNoId.story={name:"twitter (no id)"};var EmbedStories=function EmbedStories(){return react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_4__.a,{editable:!0,initialText:JSON.parse('[{"insert":"Open RP"},{"attributes":{"header":1},"insert":"\\n"},{"insert":{"youtube-video":"https://www.youtube.com/embed/ROPpn-QcLZM"}},{"insert":"\\n"}]'),onTextChange:function onTextChange(){logging("changed!")},focus:!0,onIsEmptyChange:function onIsEmptyChange(){logging("empty!")},onSubmit:function onSubmit(){logging("submit!")}}))};EmbedStories.story={name:"youtube"};var MissingUrl=function MissingUrl(){return react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_4__.a,{editable:!0,initialText:JSON.parse('[{"insert":"It\'s TikTok time!"},{"attributes":{"header":1},"insert":"\\n"},{"insert":{"pixiv-embed":{"id":"6718335390845095173"}}},{"insert":"\\n"}]'),onTextChange:function onTextChange(){logging("changed!")},focus:!0,onIsEmptyChange:function onIsEmptyChange(){logging("empty!")},onSubmit:function onSubmit(){logging("submit!")}}))};MissingUrl.story={name:"missing url"}},786:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"EditorSimple",(function(){return EditorSimple})),__webpack_require__.d(__webpack_exports__,"SpoilersNotEditable",(function(){return SpoilersNotEditable})),__webpack_require__.d(__webpack_exports__,"SpoilersImage",(function(){return SpoilersImage})),__webpack_require__.d(__webpack_exports__,"SpoilersImageNonEditable",(function(){return SpoilersImageNonEditable}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_src__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3);__webpack_exports__.default={title:"Spoilers",component:_src__WEBPACK_IMPORTED_MODULE_1__.a};var EditorSimple=function EditorSimple(){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_1__.a,{editable:!0,initialText:JSON.parse('[{"insert":"I have a secret"},{"attributes":{"header":1},"insert":"\\n"},{"attributes":{"italic":true},"insert":"The truth is, I\'m "},{"attributes":{"italic":true,"inline-spoilers":true},"insert":"tormented by Solid Snake\'s Perfect Bubble Butt"},{"attributes":{"italic":true},"insert":"."},{"insert":"\\n"}]'),onTextChange:function onTextChange(){},focus:!0,onIsEmptyChange:function onIsEmptyChange(){},onSubmit:function onSubmit(){console.log("submit!")}}))};EditorSimple.story={name:"editing"};var SpoilersNotEditable=function SpoilersNotEditable(){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_1__.a,{editable:!1,initialText:JSON.parse('[{"insert":"I have a secret"},{"attributes":{"header":1},"insert":"\\n"},{"attributes":{"italic":true},"insert":"The truth is, I\'m "},{"attributes":{"italic":true,"inline-spoilers":true},"insert":"tormented by Solid Snake\'s Perfect Bubble Butt"},{"attributes":{"italic":true},"insert":"."},{"insert":"\\n"}]'),onTextChange:function onTextChange(){},focus:!0,onIsEmptyChange:function onIsEmptyChange(){},onSubmit:function onSubmit(){console.log("submit!")}}))};SpoilersNotEditable.story={name:"not-editable"};var SpoilersImage=function SpoilersImage(){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_1__.a,{editable:!0,initialText:JSON.parse('[{"insert":"I have a secret"},{"attributes":{"header":1},"insert":"\\n"},{"insert":{"block-image":"https://media.tenor.com/images/caee629b8e640f7217b2b4b9bda49bac/tenor.gif"}},{"attributes":{"italic":true},"insert":"The truth is, I\'m "},{"attributes":{"inline-spoilers":true,"italic":true},"insert":"tormented by Solid Snake\'s Perfect Bubble Butt"},{"attributes":{"italic":true},"insert":"."},{"insert":"\\n"}]'),onTextChange:function onTextChange(){},focus:!0,onIsEmptyChange:function onIsEmptyChange(){},onSubmit:function onSubmit(){console.log("submit!")}}))};SpoilersImage.story={name:"image"};var SpoilersImageNonEditable=function SpoilersImageNonEditable(){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{backgroundColor:"white",maxWidth:"500px"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_src__WEBPACK_IMPORTED_MODULE_1__.a,{editable:!1,initialText:JSON.parse('[{"insert":"I have a secret"},{"attributes":{"header":1},"insert":"\\n"},{"insert":{"block-image":{"src":"https://media.tenor.com/images/caee629b8e640f7217b2b4b9bda49bac/tenor.gif","spoilers":true,"width":498,"height":392}}},{"attributes":{"italic":true},"insert":"The truth is, I\'m "},{"attributes":{"inline-spoilers":true,"italic":true},"insert":"tormented by Solid Snake\'s Perfect Bubble Butt"},{"attributes":{"italic":true},"insert":"."},{"insert":"\\n"}]'),onTextChange:function onTextChange(){},focus:!0,onIsEmptyChange:function onIsEmptyChange(){},onSubmit:function onSubmit(){console.log("submit!")}}))};SpoilersImageNonEditable.story={name:"image (not editable)"}},98:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(5),__webpack_require__(9),__webpack_require__(11),__webpack_require__(53),__webpack_require__(10),__webpack_require__(14),__webpack_require__(35),__webpack_require__(21),__webpack_require__(42),__webpack_require__(33),__webpack_require__(36),__webpack_require__(4),__webpack_require__(37),__webpack_require__(54),__webpack_require__(15),__webpack_require__(12),__webpack_require__(16),__webpack_require__(70);var quill__WEBPACK_IMPORTED_MODULE_18__=__webpack_require__(13),quill__WEBPACK_IMPORTED_MODULE_18___default=__webpack_require__.n(quill__WEBPACK_IMPORTED_MODULE_18__),_utils__WEBPACK_IMPORTED_MODULE_19__=__webpack_require__(6);function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _get(target,property,receiver){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function _get(target,property,receiver){var base=function _superPropBase(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(receiver):desc.value}})(target,property,receiver||target)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var BlockEmbed=quill__WEBPACK_IMPORTED_MODULE_18___default.a.import("blots/block/embed"),Link=quill__WEBPACK_IMPORTED_MODULE_18___default.a.import("formats/link"),Icon=quill__WEBPACK_IMPORTED_MODULE_18___default.a.import("ui/icons"),attachObserver=function attachObserver(domNode,destinationNode){new MutationObserver((function(mutations,observer){var _mutations$,_mutations$$addedNode;if("IFRAME"==(null===(_mutations$=mutations[0])||void 0===_mutations$||null===(_mutations$$addedNode=_mutations$.addedNodes[0])||void 0===_mutations$$addedNode?void 0:_mutations$$addedNode.nodeName)){var _mutations$2,tumblrFrame=null===(_mutations$2=mutations[0])||void 0===_mutations$2?void 0:_mutations$2.addedNodes[0],currentHeight=tumblrFrame.getBoundingClientRect().height;observer.disconnect();setTimeout((function checkNewHeight(){if(tumblrFrame.getBoundingClientRect().height!=currentHeight){var _loadingMessage$paren,_domNode$parentNode,loadingMessage=destinationNode.querySelector(".loading-message");return null==loadingMessage||null===(_loadingMessage$paren=loadingMessage.parentNode)||void 0===_loadingMessage$paren||_loadingMessage$paren.removeChild(loadingMessage),destinationNode.classList.add("loaded"),destinationNode.classList.remove("loading"),null===(_domNode$parentNode=domNode.parentNode)||void 0===_domNode$parentNode||_domNode$parentNode.removeChild(domNode),destinationNode.appendChild(domNode.querySelector("iframe")),void setTimeout((function(){var _TumblrEmbed$onLoadCa,embedSizes=tumblrFrame.getBoundingClientRect();destinationNode.dataset.embedWidth="".concat(embedSizes.width),destinationNode.dataset.embedHeight="".concat(embedSizes.height),null===(_TumblrEmbed$onLoadCa=TumblrEmbed.onLoadCallback)||void 0===_TumblrEmbed$onLoadCa||_TumblrEmbed$onLoadCa.call(TumblrEmbed)}),200)}setTimeout(checkNewHeight,100)}),100)}})).observe(domNode,{subtree:!0,childList:!0})},TumblrEmbed=function(_BlockEmbed){!function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(TumblrEmbed,_BlockEmbed);var _super=_createSuper(TumblrEmbed);function TumblrEmbed(){return _classCallCheck(this,TumblrEmbed),_super.apply(this,arguments)}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}(TumblrEmbed,null,[{key:"icon",value:function icon(){return""}},{key:"loadPost",value:function loadPost(node,data){var tumblrNode=document.createElement("div"),containerNode=document.createElement("div");tumblrNode.classList.add("tumblr-post"),tumblrNode.dataset.href=data.href,tumblrNode.dataset.did=data.did,tumblrNode.dataset.url=data.url,node.dataset.href=data.href,node.dataset.did=data.did,node.dataset.url=data.url,containerNode.appendChild(tumblrNode),document.body.appendChild(containerNode),containerNode.style.position="absolute",containerNode.style.left="-10000px",Object(_utils__WEBPACK_IMPORTED_MODULE_19__.addEmbedOverlay)(node,{onClose:function onClose(){var _TumblrEmbed$onRemove;null===(_TumblrEmbed$onRemove=TumblrEmbed.onRemoveRequest)||void 0===_TumblrEmbed$onRemove||_TumblrEmbed$onRemove.call(TumblrEmbed,node)}}),attachObserver(containerNode,node);var fileref=document.createElement("script");fileref.setAttribute("type","text/javascript"),fileref.setAttribute("async",""),fileref.setAttribute("src","https://assets.tumblr.com/post.js"),document.body.appendChild(fileref)}},{key:"renderFromUrl",value:function renderFromUrl(node,url){if(url)return TumblrEmbed.getTumblrEmbedFromUrl(url).then((function(data){TumblrEmbed.loadPost(node,data)})).catch((function(err){console.log(err)})),node;Object(_utils__WEBPACK_IMPORTED_MODULE_19__.addErrorMessage)(node,{message:"No valid url found in Tumblr post!",url:"#"})}},{key:"create",value:function create(value){var node=_get(_getPrototypeOf(TumblrEmbed),"create",this).call(this);node.contentEditable=!1,node.dataset.rendered=!1;var url="string"==typeof value?this.sanitize(value):value.url;return Object(_utils__WEBPACK_IMPORTED_MODULE_19__.addLoadingMessage)(node,{message:"Loading female-presenting nipples...",url:url,width:value.embedWidth,height:value.embedHeight}),node.classList.add("ql-embed","loading"),"string"==typeof value?TumblrEmbed.renderFromUrl(node,this.sanitize(value)):(TumblrEmbed.loadPost(node,value),node)}},{key:"setOnLoadCallback",value:function setOnLoadCallback(callback){TumblrEmbed.onLoadCallback=callback}},{key:"value",value:function value(domNode){return{href:domNode.dataset.href,did:domNode.dataset.did,url:domNode.dataset.url,embedWidth:domNode.dataset.embedWidth,embedHeight:domNode.dataset.embedHeight}}},{key:"sanitize",value:function sanitize(url){return-1!==url.indexOf("?")&&(url=url.substring(0,url.indexOf("?"))),Link.sanitize(url)}}]),TumblrEmbed}(BlockEmbed);_defineProperty(TumblrEmbed,"embedOptions",{align:"center"}),_defineProperty(TumblrEmbed,"getTumblrEmbedFromUrl",(function(url){throw new Error("unimplemented")})),TumblrEmbed.blotName="tumblr-embed",TumblrEmbed.tagName="div",TumblrEmbed.className="ql-tumblr-embed",Icon.tumblr=TumblrEmbed.icon(),__webpack_exports__.default=TumblrEmbed;try{TumblrEmbed.displayName="TumblrEmbed",TumblrEmbed.__docgenInfo={description:"TumblrEmbed represents a tumblr post embedded into the editor.",displayName:"TumblrEmbed",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/custom-nodes/TumblrEmbed.tsx#TumblrEmbed"]={docgenInfo:TumblrEmbed.__docgenInfo,name:"TumblrEmbed",path:"src/custom-nodes/TumblrEmbed.tsx#TumblrEmbed"})}catch(__react_docgen_typescript_loader_error){}try{TumblrEmbed.displayName="TumblrEmbed",TumblrEmbed.__docgenInfo={description:"TumblrEmbed represents a tumblr post embedded into the editor.",displayName:"TumblrEmbed",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/custom-nodes/TumblrEmbed.tsx#TumblrEmbed"]={docgenInfo:TumblrEmbed.__docgenInfo,name:"TumblrEmbed",path:"src/custom-nodes/TumblrEmbed.tsx#TumblrEmbed"})}catch(__react_docgen_typescript_loader_error){}}},[[355,1,2]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,